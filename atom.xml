<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Giraffe&#39;s Home</title>
  <subtitle>A Stupid Giraffe</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yemengying.com/"/>
  <updated>2018-12-13T03:33:20.000Z</updated>
  <id>http://yemengying.com/</id>
  
  <author>
    <name>Mengying Ye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>哈希与区块链</title>
    <link href="http://yemengying.com/2018/02/11/hash-blockchain/"/>
    <id>http://yemengying.com/2018/02/11/hash-blockchain/</id>
    <published>2018-02-11T14:49:44.000Z</published>
    <updated>2018-12-13T03:33:20.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;为什么要了解下区块链呢？因为区块链最近实在是太火了，火到我爸都听说了，总让我给他科普一下。。。。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;每次跟他说我也不知道，他就一脸不信，可能觉得和软件，计算机搭边的我都能知道。&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/4a978934/4e0fbec5.png&quot; alt=&quot;不信三连&quot;&gt;&lt;/p&gt;
&lt;p&gt;马上要过年回家了，为了我的压岁钱，我准备先简单了解下，以便过年被问的时候不会再一脸懵逼。要了解区块链，就要先从在区块链技术中起着重要作用的哈希开始。&lt;/p&gt;
&lt;h2 id=&quot;相关文档&quot;&gt;&lt;a href=&quot;#相关文档&quot; class=&quot;headerlink&quot; title=&quot;相关文档&quot;&gt;&lt;/a&gt;相关文档&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blockgeeks.com/guides/what-is-hashing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What Is Hashing? Under The Hood Of Blockchain - Blockgeeks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cs.upc.edu/~mjserna/docencia/grauA/P17/Crypto.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.cs.upc.edu/~mjserna/docencia/grauA/P17/Crypto.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://chimera.labs.oreilly.com/books/1234000001802/ch07.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://chimera.labs.oreilly.com/books/1234000001802/ch07.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blockgeeks.com/guides/what-is-bitcoin-cash/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blockgeeks.com/guides/what-is-bitcoin-cash/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.cn/%E5%8C%BA%E5%9D%97%E9%93%BE-%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D-%E7%BE%8E-%E9%98%BF%E5%B0%94%E6%96%87%E5%BE%B7%C2%B7%E7%BA%B3%E6%8B%89%E4%BA%9A%E5%8D%97/dp/B073QHSM7P?psc=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《区块链技术驱动金融》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;什么是哈希？&quot;&gt;&lt;a href=&quot;#什么是哈希？&quot; class=&quot;headerlink&quot; title=&quot;什么是哈希？&quot;&gt;&lt;/a&gt;什么是哈希？&lt;/h2&gt;&lt;p&gt;简单来说，哈希就是输入任意长度的字符串都可以产生固定大小的输出。在比特币这种加密货币中，交易就是输入，然后经过哈希算法(比特币采用的是 SHA - 256)，产生固定长度的输出。&lt;/p&gt;
&lt;p&gt;下面就是使用 SHA-256 算法的例子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/3ec9133e/89977ce9.png&quot; alt=&quot;SHA-256&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过上面的例子可以看出，无论输入大或者小，输出都是固定256比特的长度。这一特性在处理大量数据和交易时是至关重要的。基于哈希这一特性，我们不用记输入数据是多么大，只需要记住hash值即可。&lt;/p&gt;
&lt;p&gt;在我们进一步讨论之前，我们首先需要看看哈希函数的各种属性以及它们在区块链中的实现方式。&lt;/p&gt;
&lt;h2 id=&quot;加密哈希函数&quot;&gt;&lt;a href=&quot;#加密哈希函数&quot; class=&quot;headerlink&quot; title=&quot;加密哈希函数&quot;&gt;&lt;/a&gt;加密哈希函数&lt;/h2&gt;&lt;p&gt;加密哈希函数是一类特殊的哈希函数。为了让哈希函数达到密码安全，需要有以下几个特性：&lt;/p&gt;
&lt;h3 id=&quot;确定性-Deterministic&quot;&gt;&lt;a href=&quot;#确定性-Deterministic&quot; class=&quot;headerlink&quot; title=&quot;确定性(Deterministic)&quot;&gt;&lt;/a&gt;确定性(Deterministic)&lt;/h3&gt;&lt;p&gt;对于同一个输入，无论用哈希函数计算多少次，都会得到相同的结果。&lt;/p&gt;
&lt;h3 id=&quot;快速计算&quot;&gt;&lt;a href=&quot;#快速计算&quot; class=&quot;headerlink&quot; title=&quot;快速计算&quot;&gt;&lt;/a&gt;快速计算&lt;/h3&gt;&lt;p&gt;对于输入的字符串，能在合理的时间内算出哈希函数的输出，否则会影响系统的性能。&lt;/p&gt;
&lt;h3 id=&quot;隐秘性&quot;&gt;&lt;a href=&quot;#隐秘性&quot; class=&quot;headerlink&quot; title=&quot;隐秘性&quot;&gt;&lt;/a&gt;隐秘性&lt;/h3&gt;&lt;p&gt;如果我们已知字符串 A 的哈希值是 H(A)，那么我们没有可行的办法算出 A 是什么。注意，这里说的是 “不可行” 而不是 “不可能”。 比如下面的例子中，知道输出哈希值是可以算出输入的。&lt;/p&gt;
&lt;p&gt;假如我们掷骰子🎲，输出就是骰子上数字的哈希值。那么在知道输出的哈希值情况下，我们能否知道骰子上的数字呢？因为哈希函数是具有确定性的，相同输入的哈希值一定相同，所以我们只需计算 1-6 的哈希值是什么，然后对比就能知道骰子上的数字是什么了。&lt;/p&gt;
&lt;p&gt;当然，我们能够根据哈希值猜出骰子的数字，是因为输入值只有 6 种可能性。如果我们的输入值来自一个分散的集合，那么想要通过输出推导出输入的唯一方法可能就是“暴力破解法”了。暴力破解就是，任意选择一个输入，计算其哈希值，与现有哈希值对比是否一致，不断重复这一过程，直到找到一个输入的哈希值与现有哈希值一致。&lt;/p&gt;
&lt;p&gt;那么暴力破解法是否可行呢？假设我们现在处理的是128位的哈希值。&lt;br&gt;&lt;strong&gt;最好的情况&lt;/strong&gt;：第一次尝试就找到了答案，但这种情况可以说是几乎不可能的，比中大乐透还难。&lt;br&gt;&lt;strong&gt;最坏的情况&lt;/strong&gt;：在尝试 2^128 -1 次后得到了答案，也就是试过了所有可能的输入才找到。&lt;br&gt;&lt;strong&gt;平均的情况&lt;/strong&gt;： 在平均情况下，我们要尝试 2^128 / 2 = 2^127 次之后才能找到答案。2^127 = 1.7 X 10^38 ， 也可以说是个天文数字了。&lt;/p&gt;
&lt;p&gt;所以，在已知哈希值的情况下， 尽管可以通过暴力破解的方法找到输入的字符串是什么，但这会花费很长长长长长的时间，所以不用担心。&lt;/p&gt;
&lt;h3 id=&quot;抗篡改能力&quot;&gt;&lt;a href=&quot;#抗篡改能力&quot; class=&quot;headerlink&quot; title=&quot;抗篡改能力&quot;&gt;&lt;/a&gt;抗篡改能力&lt;/h3&gt;&lt;p&gt;对于任意一个输入，哪怕是很小的改动，其哈希改变也会非常大。比如 “This is a test” 对应的哈希值是&lt;code&gt;C7BE1ED902FB8DD4D48897C6452F5D7E509FBCDBE2808B16BCF4EDCE4C07D14E&lt;/code&gt;， 而 “this is a test” 对应的哈希值是 &lt;code&gt;2E99758548972A8E8822AD47FA1017FF72F06F3FF6A016851F45C398732BC50C&lt;/code&gt;。 &lt;/p&gt;
&lt;p&gt;看上面的例子，即便只改变了输入字符串第一个字母的大小写，输出hash值也是完全不同的。用前段时间比较流行的区块链撸猫游戏类比一下，“This is a test” 的哈希值对应猫可能是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/f094a3f5/1640dc96.png&quot; alt=&quot;喵~&quot;&gt;&lt;/p&gt;
&lt;p&gt;而只改了个大小写，“this is a test” 的哈希值对应猫可能就变成下面这样了：&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/9146f91a/4cb2eb92.png&quot; alt=&quot;喵喵~&quot;&gt;&lt;/p&gt;
&lt;p&gt;这一特性对于区块链来说十分重要，因为它决定了区块链是 immutable 的(不变的)。&lt;/p&gt;
&lt;h3 id=&quot;抗碰撞能力&quot;&gt;&lt;a href=&quot;#抗碰撞能力&quot; class=&quot;headerlink&quot; title=&quot;抗碰撞能力&quot;&gt;&lt;/a&gt;抗碰撞能力&lt;/h3&gt;&lt;p&gt;碰撞是指，对于相同的输入，经过哈希计算后产生了不同的输出。具有抗碰撞能力就是对于大部分的输入都有独一无二的输入。 这里说的是”大部分”，因为找不到碰撞，并不意味不存在碰撞。概率学中的生日悖论可以证明这一点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;生日悖论:  指如果一个房间里有23个或23个以上的人，那么至少有两个人的生日相同的概率要大于50%。这就意味着在一个典型的标准小学班级(30人)中，存在两人生日相同的可能性更高。对于60或者更多的人，这种概率要大于99%。从引起逻辑矛盾的角度来说生日悖论并不是一种悖论，从这个数学事实与一般直觉相抵触的意义上，它才称得上是一个悖论。大多数人会认为，23人中有2人生日相同的概率应该远远小于50%。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://pic.yupoo.com/jiananshi/a6e044f3/d67f5e94.png&quot; alt=&quot;生日悖论&quot;&gt;&lt;/p&gt;
&lt;p&gt;没有哪个哈希函数是完全具有防碰撞特性，但对于 SHA -256 之类的哈希函数，需要花费很长的时间来找到碰撞。所以我们完全可以认为 if H(A) = H(B) 那么 A=B.&lt;/p&gt;
&lt;h3 id=&quot;谜题友好&quot;&gt;&lt;a href=&quot;#谜题友好&quot; class=&quot;headerlink&quot; title=&quot;谜题友好&quot;&gt;&lt;/a&gt;谜题友好&lt;/h3&gt;&lt;p&gt;这一特性对加密货币来说至关重要(特别是在挖矿过程中)。先定义下什么是谜题友好。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;谜题友好： 如果对于任意 n 位输出值 y， 假定 k 选自高阶最小熵分布，如果无法找到一个可行的办法，在比 2^n 小很多的时间内找到 x ， 保证 H(k|x) = y 成立，那么我们称哈希函数 H 具有谜题友好的特性。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;什么是高阶最小熵?&lt;/strong&gt;&lt;br&gt;高阶最小熵描述了分布的分散程度。在这样的分布中，任意数值被选定的概率的小到可以忽略不计的。举个例子，如果要从 1-5 中选择一个数，就是低阶最小熵的分布。如果从 1-无穷大中选择一个数，就是高阶最小熵的分布。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;’k|x’代表了什么？&lt;/strong&gt;&lt;br&gt;‘|’ 是连接符的意思，将两个字符串连接起来。举个例子’cute|giraffe’ = ‘cutegiraffe’。&lt;/p&gt;
&lt;p&gt;再来回顾下谜题友好的定义。假设有一个 n 位输出值 y, 从高阶分布中选取一个任意值 k， 那么没有一个可行的办法，比 2^n 小很多的时间内找到 x ，使得 H(k| x) = y。&lt;/p&gt;
&lt;p&gt;这里说的还是 “不可行”，而不是 “不可能”。整个的比特币采矿的过程就基于解谜。&lt;/p&gt;
&lt;p&gt;下面是几个典型的加密哈希函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MD5：产生 128 位哈希。&lt;/li&gt;
&lt;li&gt;SHA-1：产生 160 位哈希。&lt;/li&gt;
&lt;li&gt;SHA-256：产生 256 位哈希。也是比特币中使用的哈希函数。&lt;/li&gt;
&lt;li&gt;Keccak-256：产生 256 位哈希，在 Ethereum 中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;哈希与数据结构&quot;&gt;&lt;a href=&quot;#哈希与数据结构&quot; class=&quot;headerlink&quot; title=&quot;哈希与数据结构&quot;&gt;&lt;/a&gt;哈希与数据结构&lt;/h2&gt;&lt;p&gt;如果想要理解区块链是怎样工作的，就必须要理解其中 3 种重要的数据结构 &lt;strong&gt;哈希指针&lt;/strong&gt; ,  &lt;strong&gt;区块链&lt;/strong&gt; 和 &lt;strong&gt;梅克尔树&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;哈希指针&quot;&gt;&lt;a href=&quot;#哈希指针&quot; class=&quot;headerlink&quot; title=&quot;哈希指针&quot;&gt;&lt;/a&gt;哈希指针&lt;/h3&gt;&lt;p&gt;与不同指针不同的是，哈希指针的值是通过数据计算出来的且指向数据所在位置，所以哈希指针可以告诉我们数据存储位置及数据的哈希值。通过哈希指针，我们可以很容易判断出数据是否有被篡改。&lt;/p&gt;
&lt;p&gt;哈希指针在区块链中极为重要。区块链的结构就是由创世区块开始，之后的每个区块通过哈希指针进行连接。每一个区块中都包含了前一个区块的哈希指针，这样后面区块不仅可以查找到前面所有区块，也可以验证前面区块数据有没有被更改，从而保证了区块链不易篡改的特性。&lt;/p&gt;
&lt;p&gt;哈希指针在区块链中第二个用处就是构建Merkle Tree(梅克尔树)，下文会详细讲。&lt;/p&gt;
&lt;h3 id=&quot;区块链&quot;&gt;&lt;a href=&quot;#区块链&quot; class=&quot;headerlink&quot; title=&quot;区块链&quot;&gt;&lt;/a&gt;区块链&lt;/h3&gt;&lt;p&gt;区块链是一个基于哈希指针构建的一个有序的，反向链接的交易块链表，也就是说在区块链中每个区块都通过哈希指针连接到前一个区块上。大致结构如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/a8ee7066/48a107a4.png&quot; alt=&quot;block chain&quot;&gt;&lt;/p&gt;
&lt;p&gt;区块链也常被看做一个垂直的堆栈，区块在栈顶一次追加，第一个区块也就是整个堆栈的基础。所以也常常用“高度”(height) 这个词来描述某个区块到第一个区块的距离。&lt;/p&gt;
&lt;p&gt;区块链中的每一个区块都有一个对区块头部进行 SHA256  加密哈希函数计算得出的哈希值作为标识。由于每个区块需要连接到前一个区块，所以每个区块头部专门有一个字段用来存储前一个区块(也叫父区块)的哈希值。这样每个区块都连接到了他们的父区块，从而创建了区块链。&lt;/p&gt;
&lt;p&gt;尽管每一个区块只能由一个父区块，但却可能短时间内拥有多个子区块。也就是说可能存在多个区块头部中存储的父区块的哈希值是一样的。这种情况一般发生在不同的区块在同一时间被不同的矿工找到。这样就会造成区块链的分叉，如下图：&lt;br&gt;&lt;img src=&quot;http://pic.yupoo.com/jiananshi/f6c0930f/fd6bf4c0.png&quot; alt=&quot;区块链分叉&quot;&gt;&lt;/p&gt;
&lt;p&gt;不过区块链的分叉只是暂时，会根据“最长链原则”来解决分叉。不是本文重点不再赘述。&lt;/p&gt;
&lt;p&gt;刚刚第二节提到哈希指针可以保证区块链不易被篡改，下面来分析下原因。&lt;/p&gt;
&lt;p&gt;假设有一个黑客想要篡改上图中 区块 2 的数据。由于哈希函数具有抗篡改能力，很小的改动，输出的哈希值会大不一样。所以如果改动区块2上的数据，那么 区块3 自身的哈希会发生变化。 而 区块3 的头部中存储了 区块2 的哈希值，所以 对区块2 的改动必然会影响到 区块3，以此类推，区块3后面的区块也会受到影响。所以一个区块的修改会级联影响到它之后的所有区块，而要修改之后的所有区块需要强大的算力，可以说是不可能的，这也就保证了区块链的不变性。&lt;/p&gt;
&lt;p&gt;仔细看下区块链中每个区块的结构。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区块的结构&lt;/strong&gt;&lt;br&gt;区块的内部结构分为 头部， 元数据，和一系列的交易记录。头部大小是 80个字节，而一个交易记录至少要50个字节，平均每个区块包含超过500个交易记录。所以，一个完整的区块的大小一般是它头部大小的1000倍。 下图是一个区块的大致结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/2ea67637/38ecf1fb.png&quot; alt=&quot;structure&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区块的头部&lt;/strong&gt;&lt;br&gt;如上图，区块的头部的组成分为3大块。第一块是前面区块的哈希值，用于连接到父区块。第二块包含了一个随机数，一个点数(用来表示找到这个区块的难度)，和一个时间戳，这三个字段都与挖矿的过程息息相关。第三块是梅克尔树(merkle tree )的树根,merkle tree  用来将区块内的所有交易以一种非常高效的形式组织起来。&lt;/p&gt;
&lt;p&gt;merkle tree 相关内容下文会有涉及，随机数、点数和时间戳都是与挖矿相关的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区块的标识：区块头部哈希值和区块高度&lt;/strong&gt;&lt;br&gt;一个区块最主要的标识就是区块自身头部进行二次哈希计算产生的加密哈希值。区块链中第一个区块的哈希值就是 &lt;code&gt;000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;区块的另一个标识是它在区块链当中的位置。需要注意的是一个区块只能有一个高度，但在区块链存在分叉的情况下，可能存在多个区块具有一样的高度。这时，区块的高度就不能作为唯一标识了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一个区块 ： 创世区块&lt;/strong&gt;&lt;br&gt;区块链中的第一个区块是2009年创建的，叫做“创世区块”。它是区块链中所有区块的祖先，从任何一个区块向前追溯，最终都会到达创世区块。&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;blockchain.info&lt;/code&gt; 之类的网站查看创世区块的内容 &lt;code&gt;https://blockchain.info/block/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;hash&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;confirmations&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;308321&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;size&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;285&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;height&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;version&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;merkleroot&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;tx&quot;&lt;/span&gt; : [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;time&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1231006505&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;nonce&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;2083236893&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;bits&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;1d00ffff&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;difficulty&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1.00000000&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;nextblockhash&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;比特币的创始人中本聪还在创世区块里留下一句永不可修改的话“The Times 03/Jan/2009 Chancellor on brink of second bailout for banks” (2009年1月3日，财政大臣正处于实施第二轮银行紧急援助的边缘)， 这句话是泰晤士报当天的头版文章标题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;连接区块到区块链&lt;/strong&gt;&lt;br&gt;比特币中每一个节点都存储了从创世区块开始的区块链的本地副本，本地区块链的副本会在新的区块被发现并且添加到区块链后更新。当一个节点从网络接收到一个区块时，会验证该区块，验证通过后将其添加到已有区块链上。&lt;/p&gt;
&lt;p&gt;为了建立连接，每个节点都会检验接收到的区块的头部，找到头部中存储的父区块的哈希值。举个例子，一个节点的区块链中有 277314 个区块，最后一个区块头部的哈希值计算出是&lt;code&gt;00000000000000027e7ba6fe7bad39faf3b5a83daed765f05f7d1b71a1632249&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这时节点接收到一个新的区块，内容如下：&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;size&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;43560&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;version&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;previousblockhash&quot;&lt;/span&gt; :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;00000000000000027e7ba6fe7bad39faf3b5a83daed765f05f7d1b71a1632249&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;merkleroot&quot;&lt;/span&gt; :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;5e049f4030e0ab2debb92378f53c0a6e09548aea083f3ab25e1d94ea1155e29d&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;time&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1388185038&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;difficulty&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1180923195.25802612&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;nonce&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;4215469401&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;tx&quot;&lt;/span&gt; : [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;257e7497fb8bc68421eb2c7b699dbab234831600e7352f0d9e6522c7cf3f6c77&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; #[... many more transactions omitted ...]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;05cfd38f6ae6aa83674cc99e4d75a1458c165b7ab84725eda41d018a09176634&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在验证完成之后，节点会先找到新区块头部中存储的 父区块 的哈希值，比较与最后一个区块的哈希值是否一致。是一致的就把新区块连接到区块链上，这时区块链的高度就变为了277315。&lt;/p&gt;
&lt;h3 id=&quot;什么是梅克尔树？&quot;&gt;&lt;a href=&quot;#什么是梅克尔树？&quot; class=&quot;headerlink&quot; title=&quot;什么是梅克尔树？&quot;&gt;&lt;/a&gt;什么是梅克尔树？&lt;/h3&gt;&lt;p&gt;在区块的头部中，有存储一个梅克尔树根的 hash 值。所以先来了解下什么是梅克尔树。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/c6e23447/2bcf1f9a.png&quot; alt=&quot;merkle tree&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图就是梅克尔树的样子。&lt;/p&gt;
&lt;p&gt;梅克尔树在区块链中用于组织和记录存储在区块中的交易，以便高效的验证某个交易是否存在在区块中。梅克尔树是通过不断的递归计算节点的哈希值直到只有一个hash值来构建的。&lt;/p&gt;
&lt;p&gt;当梅克尔树中有N个数据时，最多只需要2*log2(N)计算就可以验证某个特定数据是否存在，所以梅克尔树是相当高效的。&lt;/p&gt;
&lt;p&gt;梅克尔树是自底向上构建的。举个例子，假设我们现在有 A, B, C,D四笔交易需要存储记录在区块中，来看下是如何构建梅克尔树的。 首先要用 A,B,C,D 来构建树的叶子节点，将他们二次哈希后的哈希值存储在是叶子节点，就是上图中的 HA,HB,HC,HD。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;H(A) = SHA256(SHA256(A))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接着再用相邻两个结点的hash值连接在一起经过二次哈希计算来构建它们的父节点&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;H(AB) = SHA256(SHA256(H(A) + H(B)))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这一过程一直重复到只剩下顶层的一个节点，也就是存储在区块头部的树的根节点。&lt;/p&gt;
&lt;p&gt;因为梅克尔树是一棵二叉树，它需要偶数个叶子节点。如果恰好是奇数个交易，那么最后一笔交易会被复制一遍，来创造偶数个叶子节点，以便达到平衡。下图中的交易 C 就被复制了一遍。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pic.yupoo.com/jiananshi/17ae7320/1caf2511.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;根据上面的方式我们可以为任意个数的交易构建梅克尔树，一个区块通常要记录几百到上千的交易。&lt;/p&gt;
&lt;p&gt;为了验证一笔交易是否包含在区块中，节点只需要 计算 log2(N) 个哈希值，组成该交易到merkle树根的认证路径即可。正因为梅克尔树，区块链中的节点可以快速的产生一条包含10或12个哈希值的认证路径，来证明在区块中上千笔交易中某笔交易的存在。&lt;/p&gt;
&lt;h2 id=&quot;哈希与挖矿&quot;&gt;&lt;a href=&quot;#哈希与挖矿&quot; class=&quot;headerlink&quot; title=&quot;哈希与挖矿&quot;&gt;&lt;/a&gt;哈希与挖矿&lt;/h2&gt;&lt;p&gt;我们说的“挖矿”，就是指找到可以加入区块链的新的区块。矿工们要不断的工作在确保区块链的增长的同时获到新区块的奖励。早些时候，人们往往使用笔记本电脑挖矿，但随着时间的推移，大家开始组成矿池以便集中算力更高效的挖矿。&lt;/p&gt;
&lt;p&gt;这里存在一个问题，每种加密货币都有一个上限，比如，比特币一共有2100万个。如果找到新区块的速度过快，那么很快所有的比特币就被挖完了。所以，需要控制找到新区块的速度。对于比特币，新区块创建的时间间隔被控制在10分钟左右。&lt;/p&gt;
&lt;p&gt;为了控制区块的创建速度，设置了一个目标值。一个有效区块的头部哈希值必须要小于目标值。目标值是一个以一串0开头的64位的字符串，开头的0越多难度越大，每新产生2016个区块之后目标值会调整一次。区块的头部有个随机数的字段，其实挖矿的过程也就是找到一个可以使区块头部哈希值小于目标值的随机数的过程，也叫做解迷。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;哈希在区块链技术中是最基础的。如果想要了解区块链是什么，就必须要了解什么是哈希，它有什么特性，在区块链中起着什么作用。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;为什么要了解下区块链呢？因为区块链最近实在是太火了，火到我爸都听说了，总让我给他科普一下。。。。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="哈希" scheme="http://yemengying.com/categories/%E5%93%88%E5%B8%8C/"/>
    
    
      <category term="哈希" scheme="http://yemengying.com/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>【译】Spring MVC 中的 DispatcherServlet</title>
    <link href="http://yemengying.com/2017/10/07/spring-dispatcherServlet/"/>
    <id>http://yemengying.com/2017/10/07/spring-dispatcherServlet/</id>
    <published>2017-10-07T12:58:19.000Z</published>
    <updated>2018-12-13T03:46:31.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;看白夜追凶看的，写个博客总感觉身后有人。。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;原文链接&quot;&gt;&lt;a href=&quot;#原文链接&quot; class=&quot;headerlink&quot; title=&quot;原文链接&quot;&gt;&lt;/a&gt;原文链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://javarevisited.blogspot.jp/2017/09/dispatcherservlet-of-spring-mvc-10-points-to-remember.html#axzz4ujB6NAWf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果经常与 Spring MVC 打交道，那么很有必要了解什么是 DispatcherServlet。它是 Spring MVC 的核心，准确的说就是 MVC 设计模式中的 C 或 Controller。每个由 Spring MVC 处理的请求都要经过 DispatcherServlet。一般而言，它是前端控制器模式的实现，为应用提供一个统一入口。DispatcherServlet 是连接 Java 与 Spring 的桥梁,处理所有传入的请求。并且与其他声明在 web.xml 中的 Servlet 一样，也是通过一个 URL pattern 将每个请求映射到 DispatcherServlet。&lt;/p&gt;
&lt;p&gt;DispatcherServlet 负责将请求委派给 Spring MVC 中其他的组件处理，比如注有 @Controller 或 @RestController 的 Controller类，Handler Mappers(处理器映射)，View Resolvers(视图解析器) 等等。&lt;/p&gt;
&lt;p&gt;尽管，请求映射是由 @ResquestMapping 注解完成的，但实际上是由 DispatcherServlet 将请求委派给相应的 Controller 来处理的。&lt;/p&gt;
&lt;p&gt;在 RESTFul 的 web 服务中， DispatcherServlet 还负责选择正确的信息转换器，以便将响应结果转换成客户端期望的格式(JSON, XML 或 TEXT)。比如，如果客户端期望 JSON 格式，那么会使用 &lt;code&gt;MappingJacksonHttpMessageConverter&lt;/code&gt; 或 &lt;code&gt;MappingJackson2HttpMessageConverter&lt;/code&gt; (取决于 classpath 中可用的是 Jackson 1 还是 Jackson 2) 来将响应结果转成 JSON 字符串的格式。&lt;/p&gt;
&lt;h2 id=&quot;DispatcherServlet-如何处理请求&quot;&gt;&lt;a href=&quot;#DispatcherServlet-如何处理请求&quot; class=&quot;headerlink&quot; title=&quot;DispatcherServlet 如何处理请求&quot;&gt;&lt;/a&gt;DispatcherServlet 如何处理请求&lt;/h2&gt;&lt;p&gt;正如上面所说，DispatcherServlet 被用来处理所有传入的请求，并将它们路由到不同的 Controller 来进行进一步处理。它决定了由哪个 Controller 处理请求。&lt;/p&gt;
&lt;p&gt;DispatcherServlet 使用处理器映射来将传入的请求路由到处理器。默认情况下，使用 &lt;code&gt;BeanNameUrlHandlerMapping&lt;/code&gt; 和 由 @RequestMapping 注解驱动的&lt;code&gt;DefaultAnnotationHandlerMapping&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;为了找到正确的方法来处理请求，它会扫描所有声明了 @Controller 注解的类，并且通过 @RequestMapping  注解找到负责处理该请求的方法。@RequestMapping 注解可以通过路径来映射请求(比如: &lt;code&gt;@RequestMapping(“path”)&lt;/code&gt;), 也可以通过 HTTP 方法(比如: &lt;code&gt;@RequestMapping(&amp;quot;path&amp;quot;, method=RequestMethod.GET)&lt;/code&gt;), 也可以通过请求参数(比如: &lt;code&gt;@RequestMapping(&amp;quot;path&amp;quot;”, method=RequestMethod.POST, params=&amp;quot;param1”)&lt;/code&gt;),还可以通过 HTTP 请求头(比如: &lt;code&gt;@RequestMapping(&amp;quot;path&amp;quot;, header=&amp;quot;content-type=text/*”)&lt;/code&gt;)。我们也可以在类级别声明 @RequestMapping 注解来过滤传入的请求。&lt;/p&gt;
&lt;p&gt;在请求处理之后，Controller 会将逻辑视图的名字和 model 返回给 DispatcherServlet。之后利用视图解析器定位到真正的 View 以便渲染结果。我们可以指定使用的视图解析器，默认情况下，DispatcherServlet 使用 &lt;a href=&quot;http://javarevisited.blogspot.jp/2017/08/what-does-internalresourceviewresolver-do-in-spring-mvc.html#axzz4unX8dLL4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;InternalResourceViewResolver&lt;/a&gt;来将逻辑视图的名字转换成真正的视图，比如 JSP。&lt;/p&gt;
&lt;p&gt;选定视图之后，DispatcherServlet 会将数据模型与视图相结合，并将结果返回给客户端。并不是任何时候都需要视图，比如一个 RESTful 的 web 服务就不需要，它们的处理方法会利用 @ResponseBody 注解直接将请求结果返回给客户端。可以看&lt;a href=&quot;http://courses.baeldung.com/p/rest-with-spring-live-class?affcode=22136_bkwjs9xa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;REST with Spring course&lt;/a&gt;了解更多关于如何使用 Spring MVC 开发和测试 RESTful 服务的知识。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;在这篇文章中，我分享了一些关于 DispatcherServlet 比较重要的一些知识点。这些不仅可以帮助大家更好的理解 DispatcherServlet，也可以鼓励大家进一步去学习相关的知识。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DispatcherServlet 是 Spring MVC 应用中主要的控制器。所有的请求都会先经由 DispatcherServlet 处理，再由 Controller (声明有 @Controller 注解的类) 处理。&lt;/li&gt;
&lt;li&gt;DispatcherServlet 是前端控制器模式的实现。前端控制器就是个用来处理网站所有请求的控制器。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;就像其他的 Servlet， DispatcherServlet 也是声明和配置在 web.xml 文件中的：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;web-app&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;servlet&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;SpringMVC&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;servlet-class&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;servlet-class&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;load-on-startup&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;load-on-startup&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;servlet&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;servlet-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;SpringMVC&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;*&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;servlet-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;web-app&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DispatcherServlet 继承自 HttpServlet 基类。Servlet 引擎(比如 Tomcat) 创建该类的实例，并且调用它不同的方法，比如：init(), service(), destroy()。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;DispatcherServlet 为 Spring MVC 应用提供统一入口，处理所有的请求。&lt;/li&gt;
&lt;li&gt;DispatcherServlet 也完全与 Spring IoC 容器集成，可以使用 Spring 框架的每一个特性，比如依赖注入。&lt;/li&gt;
&lt;li&gt;当 DispatcherServlet 被配置为 &lt;code&gt;load-on-startup = 1&lt;/code&gt;,意味着该 servlet  会在启动时由容器创建，而不是在请求到达时。这样做会降低第一次请求的响应时间，因为DispatcherServlet 会在启动时做大量工作，包括扫描和查找所有的 Controller 和 RequestMapping。&lt;/li&gt;
&lt;li&gt;在 DispatcherServlet 初始化期间，Spring 框架会在 WEB-INF 文件夹中查找名为 [servlet-name]-servlet.xml 的文件，并创建相应的 bean。比如，如果 servlet 像上面 web.xml 文件中配置的一样，名为 “SpringMVC”，那么会查找 “SpringMVC-Servlet.xml”的文件。如果全局作用域中有相同名字的bean，会被覆盖。可以用 servlet 初始化参数 &lt;code&gt;contextConfigLocation&lt;/code&gt;更改配置文件的位置。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/2017-10-08-Desktop%20HD.png&quot; alt=&quot;Dispatcher Servlet flow&quot;&gt;&lt;/li&gt;
&lt;li&gt;在 Spring MVC 框架中，每个 DispatcherServlet 都有它自己的 WebApplicationContext ，并且继承了根 WebApplicationContext 中定义的所有 bean。这些继承的 bean 在 servlet 指定的作用域中可以被重载，也可以在其指定作用域中定义新的 bean。&lt;/li&gt;
&lt;li&gt;Spring MVC 中的 DispatcherServlet也允许返回 Servlet API 定义的 last-modification-date。为了决定请求最后修改时间，DispatcherServlet会先查找合适的 handler mapping，然后检测处理器是否实现了 LastModified 接口。如果实现了，就调用接口的 getLastModified(request) 方法，并将该值返回给客户端。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上就是关于 DispatcherSerlvet 的内容。正如上面所讲，DispacherServlet 是 Spring MVC 的骨干，是主要的控制器，用来将不同的 HTTP 请求路由当相应的 Controller。它是前端控制器设计模式的实现，并且为应用提供单一入口。可以在 web.xml 中配置 DispatcherServlet，但建议将 load-on-startup 设置为 1。这样容器会在启动时加载该 Serlvet 而不是请求到达时。这样能减少第一个请求的响应时间。&lt;/p&gt;
&lt;hr style=&quot;border-color: #333;border-width:2px; border-style: dotted; margin-top: 30px; margin-bottom: 30px;&quot;&gt;

&lt;p&gt;出租车司机终于可以下了，等的花儿都谢了，宋康昊千万不要太帅~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/c494820d/08877f04.jpg&quot; alt=&quot;miao a&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;看白夜追凶看的，写个博客总感觉身后有人。。。。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yemengying.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
      <category term="翻译" scheme="http://yemengying.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Oracle 中的外键与锁</title>
    <link href="http://yemengying.com/2017/09/04/oracle-foreignkey-lock/"/>
    <id>http://yemengying.com/2017/09/04/oracle-foreignkey-lock/</id>
    <published>2017-09-04T10:31:07.000Z</published>
    <updated>2018-12-13T03:49:20.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;算是接上篇吧。。。 内容主要来自 Oracle 官方文档，自己重新画了下图。图中配色来自大神 draveness 的&lt;a href=&quot;http://draveness.me/mysql-innodb.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;，小清新的配色真是美美哒。看来我在学画图的路上还要修炼很久啊。。。。。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;锁是一种可以防止多个事务错误的更新共享数据的机制，在维护数据库并发性和一致性方面起着关键的作用。在 Oracle 堆组织表中， 数据库锁的行为与外键列是否有索引有关。如果外键未加索引，那么子表可能会被频繁锁住，从而导致死锁，降低并发性。所以，Oracle 官方建议绝对多数情况都为外键加索引，除非父表的唯一键/主键绝对不会更新或删除。&lt;/p&gt;
&lt;h2 id=&quot;未加索引的外键与锁&quot;&gt;&lt;a href=&quot;#未加索引的外键与锁&quot; class=&quot;headerlink&quot; title=&quot;未加索引的外键与锁&quot;&gt;&lt;/a&gt;未加索引的外键与锁&lt;/h2&gt;&lt;p&gt;当以下条件都满足时，数据库会获取子表的全表锁：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子表的外键列未加索引&lt;/li&gt;
&lt;li&gt;父表的主键被修改(比如：删除一行或主键被修改)或者合并到父表。在父表插入一条记录是不会锁住子表的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设 hr.departments 是父表，hr.employees 是子表， hr.employees 中的 department_id 是未加索引的外键列。下图展现了修改父表 department_id = 60 这一记录的主键时，数据库加锁的情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/2ee4d87f/a5d4acb9.png&quot; alt=&quot;unindexed_foreign_key&quot;&gt;&lt;/p&gt;
&lt;p&gt;在上图中，数据库在更新父表 department 60 这一记录的主键时，会获得子表 employees 的全表锁。这样其他会话可以查询子表但不允许更新子表。子表的表锁会在父表更新完成后立刻释放。如果修改父表多条记录，那么修改每一条都会获得子表的表锁并释放。&lt;/p&gt;
&lt;p&gt;在 Oracle 9i 及以上版本中，全表锁都是短期的，仅在 DML 操作期间存在，而不是整个事务。但即便如此，还是要避免，因为全表锁可能会导致死锁。Tom 也曾说过，导致死锁的头号原因就是外键未加索引(第二号原因是表上的位图索引遭到并发更新)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意，子表的 DML 不会获得父表的表锁  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;加索引的外键与锁&quot;&gt;&lt;a href=&quot;#加索引的外键与锁&quot; class=&quot;headerlink&quot; title=&quot;加索引的外键与锁&quot;&gt;&lt;/a&gt;加索引的外键与锁&lt;/h2&gt;&lt;p&gt;当以下条件都满足时，数据库不会获得子表的全表锁。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子表的外键列已加索引&lt;/li&gt;
&lt;li&gt;父表的主键正在被修改(比如：删除一行或主键被修改)或合并到父表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面的图展示了子表 employees 的外键列 department_id 加了索引。 当一个事务从父表 department 中删除 department 280 时， 这一操作不会引起数据库获得子表的全表锁。&lt;/p&gt;
&lt;p&gt;父表上的锁是为了防止其他事务获取表级排他锁，但不会阻止父表或子表上的 DML  操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/3acb7f13/cf7696ef.png&quot; alt=&quot;indexed_foreign_key&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果子表指明了 &lt;code&gt;ON DELETE CASCADE&lt;/code&gt;, 那么删除父表会导致删除子表对应的记录。比如删除父表 department 280 这一记录，那么子表 employees 中 department_id 为 280 的记录也会被删除。 在这种情况下，加锁的规则与删除完主表后再删除子表的记录是一样的。&lt;/p&gt;
&lt;p&gt;这篇是不是有点水啊。。。。是时候放出我姑家的小霸王 cookie 宝宝撑下场了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然我又咬人，又乱叫，还喜欢对着窗帘小便。但我知道我是个好狗狗。&lt;br&gt;                                         ————cookie                                                                            &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/47585e7b/8318af70.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/943bd285/7bae2334.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/8fa84a4a/ded05647.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/65bbfe90/2c9aa704.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;算是接上篇吧。。。 内容主要来自 Oracle 官方文档，自己重新画了下图。图中配色来自大神 draveness 的&lt;a href=&quot;http://draveness.me/mysql-innodb.html&quot;&gt;文章&lt;/a&gt;，小清新的配色真是美美哒。看来我在学画图的路上还要修炼很久啊。。。。。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Oracle" scheme="http://yemengying.com/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://yemengying.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>小死锁</title>
    <link href="http://yemengying.com/2017/07/15/deadlock-in-oracle/"/>
    <id>http://yemengying.com/2017/07/15/deadlock-in-oracle/</id>
    <published>2017-07-15T14:52:22.000Z</published>
    <updated>2018-12-13T03:56:58.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt; 最近线上偶尔就会报个死锁问题，上周终于解决了,周末整理下。虽然问题解决了，但是trace file里的死锁图还是不太理解。要是有人能给我讲讲那真是极好的，要是没人的话我就。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。再翻翻文档。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;近一个月线上偶尔就会报死锁的问题，错误如下图：&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/d4b73e70/8096062f.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;“ORA-00060: deadlock detected while waiting for resource ”&lt;/code&gt;这个错误说明Oracle 数据库监测到了死锁的存在。这时 Oracle 会回滚造成死锁的其中一个事务，另一个事务正常执行(不会察觉到发生了死锁)，并向执行了回滚的事务抛出上面的错误信息。&lt;/p&gt;
&lt;p&gt;在 DBA 的帮助下定位到了造成死锁的两块代码。由于项目有很多的悲观锁，即利用“SELECT…FOR UPDATE”对资源加排他行级锁，所以第一感觉就是看看这两段代码有没有按照相反的顺序对两个或多个资源进行加锁。&lt;/p&gt;
&lt;p&gt;不过分析过代码之后却没有立刻找到可能造成死锁的原因，两块代码对数据库资源的操作如下表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://yemengying.com/qiniu/image/2017-07-17-Screen%20Shot%202017-07-17%20at%2010.16.52%20PM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;从表面上看Session 1貌似中只锁了 actor1 并更新，Session 2中依次锁了 actor2 和 actor1，不满足互相等待对方加锁的资源，就算是Session1持有actor1锁时间过长，导致 Session2 一直拿不到 actor1 的锁，也应该报“lock wait timeout”，而不是死锁。&lt;/p&gt;
&lt;p&gt;为了验证确实是这两段代码造成的死锁，写了测试代码，开了两个线程，模仿死锁的这两段代码，去掉了与数据库无关的业务逻辑，看看能否重现。毕竟心里还有点小怀疑，会不会是 DBA 搞错了，不是这两段代码的问题。&lt;br&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@SpringApplicationConfiguration&lt;/span&gt;(classes = DeadLockTest.class)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@ImportAutoConfiguration&lt;/span&gt;(&amp;#123;CommonConfig.class&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DeadLockTest&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseUnitDbTest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Long lenderId = &lt;span class=&quot;number&quot;&gt;16642L&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Long borrowerId = &lt;span class=&quot;number&quot;&gt;16643L&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ActorService actorService;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Qualifier&lt;/span&gt;(CommonConfig.ORACLE_TRANSACTION_MANAGER_NAME)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; PlatformTransactionManager platformTransactionManager;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ExecutorService es = Executors.newFixedThreadPool(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadFactoryBuilder().setNameFormat(&lt;span class=&quot;string&quot;&gt;&quot;Test-Thread-%d&quot;&lt;/span&gt;).build());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testRefreshAndLockActor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    es.invokeAll(Lists.newArrayList(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;::lock1, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;::lock2));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Void &lt;span class=&quot;title&quot;&gt;lock1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    TransactionTemplate t = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TransactionTemplate(platformTransactionManager);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    t.execute((s) -&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Before Lock &quot;&lt;/span&gt; + Thread.currentThread().getName());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      Actor lender = actorService.refreshAndLockActor(lenderId);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread.sleep(&lt;span class=&quot;number&quot;&gt;6000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      lender.setLockedForInv(BigDecimal.ONE);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      actorService.update(lender);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;After Lock &quot;&lt;/span&gt; + Thread.currentThread().getName());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Void &lt;span class=&quot;title&quot;&gt;lock2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    TransactionTemplate t = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TransactionTemplate(platformTransactionManager);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    t.execute((s) -&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread.sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Before Lock &quot;&lt;/span&gt; + Thread.currentThread().getName());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      Actor borrower = actorService.refreshAndLockActor(borrowerId);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      Actor lender = actorService.refreshAndLockActor(lenderId);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;After Lock &quot;&lt;/span&gt; + Thread.currentThread().getName());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果。。。真的报了死锁。。。。&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/fba203b9/133b7b02.jpeg&quot; alt=&quot;&quot;&gt;&lt;br&gt;控制台的报错如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://yemengying.com/qiniu/image/2017-07-17-Screen%20Shot%202017-07-17%20at%2010.19.56%20PM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题原因&quot;&gt;&lt;a href=&quot;#问题原因&quot; class=&quot;headerlink&quot; title=&quot;问题原因&quot;&gt;&lt;/a&gt;问题原因&lt;/h2&gt;&lt;p&gt;已经确定了造成死锁的两段代码，接下来就差找出原因了。&lt;br&gt;&lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt;比较直观，就是对资源加行级排他锁，应该没什么猫腻。那就肯定是在&lt;code&gt;UPDATE Actor1&lt;/code&gt;的时候有什么不为人知的操作，导致 Session1 需要获取 Actor2 的锁，导致死锁。&lt;/p&gt;
&lt;p&gt;第一怀疑的是触发器，虽然目前公司已经禁止使用触发器了，但由于历史原因主库还是遗留着一些触发器。和明佳排查了所有相关的触发器之后，基本排除了是由触发器引起的。&lt;/p&gt;
&lt;p&gt;不过虽然这个问题不是触发器的锅，但还是提会到了，在涉及到触发器时，如果不是对系统特别熟，排查错误真的很困难。。。&lt;/p&gt;
&lt;p&gt;排除了触发器之后，DBA 提出那就只能是外键导致的了。在 DBA 把 dev环境数据库的外键去掉后，再次执行测试代码，果然就不再报死锁了。&lt;/p&gt;
&lt;p&gt;原来 Actor 表上的 refer_id 是一个关联 Actor 表主键的外键(Self-Referential Integrity Constraints)，而 actor1 的 refer_id 正好是 actor2 的 id，所以在更新 actor1 的全字段的时候，也更新了 refer_id(其实值没变)，由于外键的约束，在将 actor1 的 refer_id 更新为 actor2的 id 时，需要确保 actor2 是存在的，并且在更新过程中，不能被删除，所以 Session1 会申请 actor2 的锁(个人理解不一定准确)。而这时 actor2 的锁已经被 Session2 持有了，并且 Session2 正在等待 actor1 的锁，就发生了死锁。&lt;/p&gt;
&lt;p&gt;用图来描述下：&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/d09831f3/41ba745e.jpg&quot; alt=&quot;deadlock&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h2&gt;&lt;p&gt;费了一天多才把问题找出来，用了几分钟就 fix 了。其实我只是需要更新 Actor 上的两个字段，根本不需要更新全部字段，只是当时在写的时候已经有更新全字段的方法了，就偷了个懒。。。。。。&lt;/p&gt;
&lt;p&gt;所以解决办法就是不再调用更新全字段的方法，加了个只更新部分字段的方法，这样就不会在更新 actor1 的外键字段了，也就不会造成在更新 actor1 的时候去请求 actor2 的锁了。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;虽然这个问题不是触发器引起的，但禁用触发器还是很有道理滴，不然出问题查到吐血&lt;/li&gt;
&lt;li&gt;外键这个东东，也能不用就不用吧，由程序控制。其实现在公司已经不让用外键和触发器了，不过由于历史原因，一些老系统只能慢慢重构了。查了下，由于外键引起的死锁还是蛮多的，比较常见的是外键列不加索引，导致更新主表字段时锁住了子表，下篇blog可以学习下外键和死锁不得不说的那些事。算了，还是不立 flag 了，基本上说了下篇要写啥的，都没有下篇了。。。。&lt;/li&gt;
&lt;li&gt;不要更新全字段。抛开这个死锁问题，更新全字段也是很影响效率的。还是只更新有改动的字段吧。&lt;/li&gt;
&lt;li&gt;不能偷懒，当时省了5分钟，找 bug 花了一天多。。。都是泪&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;遗留问题&quot;&gt;&lt;a href=&quot;#遗留问题&quot; class=&quot;headerlink&quot; title=&quot;遗留问题&quot;&gt;&lt;/a&gt;遗留问题&lt;/h2&gt;&lt;p&gt;问题虽然解决了，但是还有点小疑问的。这个死锁在 trace file 中的死锁图如下：&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/f886128b/74344a68.jpg&quot; alt=&quot;trace file&quot;&gt;&lt;/p&gt;
&lt;p&gt;那么问题来了，两个 session 持有两个资源的 X 锁还是好理解的，但他们等待的为什么是 S 锁呢？？？至少 Session2 是在等待 actor1 的排他行级锁的，不应该是也是等待 X 么。求好心人的解答。&lt;br&gt;&lt;img src=&quot;https://yemengying.com/qiniu/image/2017-07-17-Screen%20Shot%202017-07-14%20at%204.37.56%20PM.png?imageMogr2/thumbnail/300x250!&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 最近线上偶尔就会报个死锁问题，上周终于解决了,周末整理下。虽然问题解决了，但是trace file里的死锁图还是不太理解。要是有人能给我讲讲那真是极好的，要是没人的话我就。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。再翻翻文档。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Oracle" scheme="http://yemengying.com/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://yemengying.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>【译】Reddit如何统计每个帖子的浏览量</title>
    <link href="http://yemengying.com/2017/06/04/reddit-view-counting/"/>
    <id>http://yemengying.com/2017/06/04/reddit-view-counting/</id>
    <published>2017-06-04T05:26:17.000Z</published>
    <updated>2018-12-13T04:01:09.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;之前没听过也没了解过 HyperLogLog，通过翻译这篇文章正好简单学习下。欢迎指正错误~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;https://redditblog.com/2017/05/24/view-counting-at-reddit/?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;😁🤗😉&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/8afc30ad/b2e3cd7c.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们想要更好的向用户展示 Reddit 的规模。为了这一点，投票和评论数是一个帖子最重要的指标。然而，在 Reddit 上有相当多的用户只浏览内容，既不投票也不评论。所以我们想要建立一个能够计算一个帖子浏览数的系统。这一数字会被展示给帖子的创作者和版主，以便他们更好的了解某个帖子的活跃程度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/24277564/dc03ba12.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在这篇博客中，我们将讨论我们是如何实现超大数据量的计数。&lt;/p&gt;
&lt;h2 id=&quot;计数机制&quot;&gt;&lt;a href=&quot;#计数机制&quot; class=&quot;headerlink&quot; title=&quot;计数机制&quot;&gt;&lt;/a&gt;计数机制&lt;/h2&gt;&lt;p&gt;对于计数系统我们主要有四种需求:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;帖子浏览数必须是实时或者近实时的，而不是每天或者每小时汇总。&lt;/li&gt;
&lt;li&gt;同一用户在短时间内多次访问帖子，只算一个浏览量&lt;/li&gt;
&lt;li&gt;显示的浏览量与真实浏览量间允许有小百分之几的误差&lt;/li&gt;
&lt;li&gt;Reddit 是全球访问量第八的网站，系统要能在生产环境的规模上正常运行，仅允许几秒的延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要全部满足以上四个需求的困难远远比听上去大的多。为了实时精准计数，我们需要知道某个用户是否曾经访问过这篇帖子。想要知道这个信息，我们就要为每篇帖子维护一个访问用户的集合，然后在每次计算浏览量时检查集合。一个 naive 的实现方式就是将访问用户的集合存储在内存的 hashMap 中，以帖子 Id 为 key。&lt;/p&gt;
&lt;p&gt;这种实现方式对于访问量低的帖子是可行的，但一旦一个帖子变得流行，访问量剧增时就很难控制了。甚至有的帖子有超过 100 万的独立访客！ 对于这样的帖子，存储独立访客的 ID  并且频繁查询某个用户是否之前曾访问过会给内存和 CPU 造成很大的负担。&lt;/p&gt;
&lt;p&gt;因为我们不能提供准确的计数，我们查看了几种不同的&lt;a href=&quot;https://en.wikipedia.org/wiki/Count-distinct_problem&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基数估计算法&lt;/a&gt;。有两个符合我们需求的选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一是线性概率计数法，很准确，但当计数集合变大时所需内存会线性变大。&lt;/li&gt;
&lt;li&gt;二是基于 &lt;a href=&quot;http://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HyperLogLog&lt;/a&gt; (以下简称 HLL )的计数法。 HLL 空间复杂度较低，但是精确度不如线性计数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面看下 HLL 会节省多少内存。如果我们需要存储 100 万个独立访客的 ID, 每个用户 ID 8 字节长，那么为了存储一篇帖子的独立访客我们就需要 8 M的内存。反之，如果采用 HLL  会显著减少内存占用。不同的 HLL 实现方式消耗的内存不同。如果采用&lt;a href=&quot;http://antirez.com/news/75&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;的实现方法，那么存储 100 万个 ID 仅需 12 KB，是原来的 0.15%！！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://highscalability.com/blog/2012/4/5/big-data-counting-how-to-count-a-billion-distinct-objects-us.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Big Data Counting: How to count a billion distinct objects using only 1.5KB of Memory - High Scalability -&lt;/a&gt;这篇文章很好的总结了上面的算法。&lt;/p&gt;
&lt;p&gt;许多 HLL 的实现都是结合了上面两种算法。在集合小的时候采用线性计数，当集合大小到达一定的阈值后切换到 HLL。前者通常被成为 ”稀疏“(sparse) HLL，后者被称为”稠密“(dense) HLL。这种结合了两种算法的实现有很大的好处，因为它对于小集合和大集合都能够保证精确度，同时保证了适度的内存增长。可以在 google 的这篇&lt;a href=&quot;https://stefanheule.com/papers/edbt13-hyperloglog.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;论文&lt;/a&gt;中了解这种实现的详细内容。&lt;/p&gt;
&lt;p&gt;现在我们已经确定要采用 HLL 算法了，不过在选择具体的实现时，我们考虑了以下三种不同的实现。因为我们的数据工程团队使用 Java 和 Scala，所以我们只考虑 Java 和 Scala 的实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Twitter 提供的 &lt;a href=&quot;https://twitter.github.io/algebird/datatypes/approx/hyperloglog.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Algebird&lt;/a&gt;，采用 Scala 实现。Algebird 有很好的文档，但他们对于 sparse 和 dense HLL 的实现细节不是很容易理解。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/addthis/stream-lib&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stream-lib&lt;/a&gt;中提供的 HyperLogLog++， 采用 Java 实现。stream-lib 中的代码文档齐全，但有些难理解如何合适的使用并且改造的符合我们的需求。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://antirez.com/news/75&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redis HLL 实现&lt;/a&gt;，这是我们最终选择的。我们认为 Redis 中 HLLs 的实现文档齐全、容易配置，提供的相关 API 也很容易集成。还有一个好处是，我们可以用一台专门的服务器部署，从而减轻性能上的压力。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;//yemengying.com/qiniu/image/2017-06-03-Screen%20Shot%202017-06-03%20at%207.58.59%20PM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Reddit 的数据管道依赖于 Kafka。当一个用户访问了一篇博客，会触发一个事件，事件会被发送到事件收集服务器，并被持久化在 Kafka 中。&lt;/p&gt;
&lt;p&gt;之后，计数系统会依次顺序运行两个组件。在我们的计数系统架构中，第一部分是一个 Kafka 的消费者，我们称之为 Nazar。Nazar 会从 Kafka 中读取每个事件，并将它通过一系列配置的规则来判断该事件是否需要被计数。我们取这个名字仅仅是因为 Nazar 是一个眼睛形状的护身符，而 ”Nazar“ 系统就像眼睛一样使我们的计数系统远离不怀好意者的破坏。其中一个我们不将一个事件计算在内的原因就是同一个用户在很短时间内重复访问。Nazar 会修改事件，加上个标明是否应该被计数的布尔标识，并将事件重新放入 Kafka。&lt;/p&gt;
&lt;p&gt;下面就到了系统的第二个部分。我们将第二个 Kafka 的消费者称作 Abacus，用来进行真正浏览量的计算，并且将计算结果显示在网站或客户端。Abacus 从 Kafka 中读取经过 Nazar 处理过的事件，并根据 Nazar 的处理结果决定是跳过这个事件还是将其加入计数。如果 Nazar 中的处理结果是可以加入计数，那么 Abacus 首先会检查这个事件所关联的帖子在 Redis 中是否已经存在了一个 HLL 计数器。如果已经存在，Abacus 会给 Redis 发送个 PFADD 的请求。如果不存在，那么 Abacus 会给 Cassandra 集群发送个请求（Cassandra 用来持久化 HLL 计数器和 计数值的），然后向 Redis 发送 &lt;a href=&quot;https://redis.io/commands/set&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SET&lt;/a&gt;  请求。这通常会发生在网友访问较老帖子的时候，这时该帖子的计数器很可能已经在 Redis 中过期了。&lt;/p&gt;
&lt;p&gt;为了存储存在 Redis 中的计数器过期的老帖子的浏览量。Abacus 会周期性的将 Redis 中全部的 HLL 和 每篇帖子的浏览量写入到 Cassandra 集群中。为了避免集群过载，我们以 10 秒为周期批量写入。&lt;/p&gt;
&lt;p&gt;下图是事件流的大致流程：&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/387a1243/4a4db997.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;我们希望浏览量可以让发帖者了解帖子全部的访问量，也帮助版主快速定位自己社区中高访问量的帖子。在未来，我们计划利用我们数据管道在实时方面的潜力来为 Reddit 的用户提供更多的有用的反馈。&lt;/p&gt;
&lt;p&gt;————————————————————分割线———————————————————-&lt;/p&gt;
&lt;p&gt;这周一定要看完《地球上的星星》💪&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/36d4bd87/8761312e.jpg&quot; alt=&quot;Like stars on earth&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前没听过也没了解过 HyperLogLog，通过翻译这篇文章正好简单学习下。欢迎指正错误~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://yemengying.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="翻译" scheme="http://yemengying.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 唯一性约束与 NULL</title>
    <link href="http://yemengying.com/2017/05/18/mysql-unique-key-null/"/>
    <id>http://yemengying.com/2017/05/18/mysql-unique-key-null/</id>
    <published>2017-05-18T14:35:54.000Z</published>
    <updated>2018-12-13T04:02:58.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;很久之前的一个 bug 了，简单记录下。。。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;之前做的一个需求，简化描述下就是接受其他组的 MQ 的消息，然后在数据库里插入一条记录。为了防止他们重复发消息，插入多条重复记录，所以在表中的几个列上加了个唯一性索引。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;UNIQUE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INDEX&lt;/span&gt; IDX_UN_LOAN_PLAN_APP &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; testTable (A, B, C);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这时 A,B,C 三列都是不允许 NULL 值的，唯一性约束也是 work 的。&lt;br&gt;后来由于需求的变化，修改了以前的唯一性约束，又多加了一列。(至于为什么加就不赘述了)。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; testTable&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INDEX&lt;/span&gt; IDX_UN_LOAN_PLAN_APP,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;UNIQUE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`IDX_UN_LOAN_PLAN_APP`&lt;/span&gt; (A, B, C, D);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;新加的 D 是类型是 datetime, 允许为 NULL，默认值为 NULL。之所以默认值为 NULL，是考虑到不是所有记录都有这个时间的， 如果强行设置一个 Magic Value (比如’1970-01-01 08:00:00‘)当做默认值，看起来很奇怪。&lt;/p&gt;
&lt;p&gt;蓝后。。。就出问题了。加了 D 之后，唯一性约束基本就失效了。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; testTable (A,B,C,D) &lt;span class=&quot;keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;--- OK&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; testTable (A,B,C,D) &lt;span class=&quot;keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;--- OK&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; testTable (A,B,C,D) &lt;span class=&quot;keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;--- OK&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的三条 SQL 都是可以执行成功的，数据库中会有多条一样的记录。可按照我们以前的构想，在执行后两条 SQL 时 应该抛出 ‘Duplicate key’ 的异常的。&lt;/p&gt;
&lt;p&gt;后来查了一下，才发现其实 MySQL 官方文档上已经明确说了这一点， 唯一性索引是允许多个 NULL 值的存在的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A UNIQUE index creates a constraint such that all values in the index must be distinct. An error occurs if you try to add a new row with a key value that matches an existing row. For all engines, a UNIQUE index allows multiple NULL values for columns that can contain NULL.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从下表中也可以看出来不管是采用什么类型的存储引擎，在建立 unique key 的时候都是允许多个 NULL 存在的。。。。&lt;br&gt;￼&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/bfbe439c/2ba53a19.png&quot; alt=&quot;index&quot;&gt;&lt;br&gt;细想想，其实也蛮合理，毕竟在 MySQL 中认为 NULL 代表着“未知”。 在 SQL 中，任何值与 NULL 的比较返回值都是 NULL 而不是 TRUE, 就算 NULL 与 NULL 的比较也是返回 NULL。&lt;/p&gt;
&lt;p&gt;所以只能 fix 了。。。解决办法也蛮简单粗暴的，直接把线上数据刷了一遍，将“1970-01-01 08:00:00”作为默认值，然后把那列改为不允许为 NULL 的了，咳咳。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/498d5f2c/8dfdd2be.jpg&quot; alt=&quot;wuli 滚滚&quot;&gt;&lt;/p&gt;
&lt;p&gt;MySQL 官网上也有蛮多人讨论过这个问题，一部分人认为这是 MySQL 的 bug， 另一部分则认为是一个 feature，附上链接。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bugs.mysql.com/bug.php?id=8173&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MySQL Bugs: #8173: unique index allows duplicates with null values&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很久之前的一个 bug 了，简单记录下。。。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yemengying.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yemengying.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>【译】Executor, ExecutorService 和 Executors 间的不同</title>
    <link href="http://yemengying.com/2017/03/17/difference-between-executor-executorService/"/>
    <id>http://yemengying.com/2017/03/17/difference-between-executor-executorService/</id>
    <published>2017-03-17T06:07:21.000Z</published>
    <updated>2017-06-10T07:56:03.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;搁了好久没更博客，再不写要被某人 BS 了，咦。。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://javarevisited.blogspot.jp/2017/02/difference-between-executor-executorservice-and-executors-in-java.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;  &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt; 
&lt;p&gt;&lt;code&gt;java.util.concurrent.Executor&lt;/code&gt;, &lt;code&gt;java.util.concurrent.ExecutorService&lt;/code&gt;, &lt;code&gt;java.util.concurrent. Executors&lt;/code&gt; 这三者均是 Java Executor 框架的一部分，用来提供线程池的功能。因为创建和管理线程非常心累，并且操作系统通常对线程数有限制，所以建议使用线程池来并发执行任务，而不是每次请求进来时创建一个线程。使用线程池不仅可以提高应用的响应时间，还可以避免&lt;code&gt;&amp;quot;java.lang.OutOfMemoryError: unable to create new native thread&amp;quot;&lt;/code&gt; 之类的错误。&lt;/p&gt;
&lt;p&gt;在 Java 1.5 时，开发者需要关心线程池的创建和管理，但在 Java 1.5 之后 Executor 框架提供了多种内置的线程池,例如：FixedThreadPool(包含固定数目的线程)，CachedThreadPool(可根据需要创建新的线程)等等。&lt;/p&gt;
&lt;h2 id=&quot;Executor&quot;&gt;&lt;a href=&quot;#Executor&quot; class=&quot;headerlink&quot; title=&quot;Executor&quot;&gt;&lt;/a&gt;Executor&lt;/h2&gt;&lt;p&gt;Executor, ExecutorService, 和 Executors 最主要的区别是 Executor 是一个抽象层面的核心接口(大致代码如下)。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Executor&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Runnable command)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不同于 &lt;code&gt;java.lang.Thread&lt;/code&gt; 类将任务和执行耦合在一起， Executor 将任务本身和执行任务分离，可以阅读 &lt;a href=&quot;http://javarevisited.blogspot.sg/2016/12/difference-between-thread-and-executor.html来看看&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;difference between Thread and Executor&lt;/a&gt; 来了解 Thread 和 Executor 间更多的不同。&lt;/p&gt;
&lt;h2 id=&quot;ExecutorService&quot;&gt;&lt;a href=&quot;#ExecutorService&quot; class=&quot;headerlink&quot; title=&quot;ExecutorService&quot;&gt;&lt;/a&gt;ExecutorService&lt;/h2&gt;&lt;p&gt;ExecutorService 接口 对 Executor 接口进行了扩展，提供了返回 Future 对象，终止，关闭线程池等方法。当调用 &lt;code&gt;shutDown&lt;/code&gt; 方法时，线程池会停止接受新的任务，但会完成正在 pending 中的任务。&lt;/p&gt;
&lt;p&gt;Future 对象提供了异步执行，这意味着无需等待任务执行的完成，只要提交需要执行的任务，然后在需要时检查 Future 是否已经有了结果，如果任务已经执行完成，就可以通过 Future.get() 方法获得执行结果。需要注意的是，Future.get() 方法是一个阻塞式的方法，如果调用时任务还没有完成，会等待直到任务执行结束。&lt;/p&gt;
&lt;p&gt;通过 ExecutorService.submit() 方法返回的 Future 对象，还可以取消任务的执行。Future 提供了 cancel() 方法用来取消执行 pending 中的任务。&lt;/p&gt;
&lt;p&gt;ExecutorService 部分代码如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExecutorService&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Executor&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;T&amp;gt; &lt;span class=&quot;function&quot;&gt;Future&amp;lt;T&amp;gt; &lt;span class=&quot;title&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Callable&amp;lt;T&amp;gt; task)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;T&amp;gt; &lt;span class=&quot;function&quot;&gt;Future&amp;lt;T&amp;gt; &lt;span class=&quot;title&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Runnable task, T result)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;T&amp;gt; List&amp;lt;Future&amp;lt;T&amp;gt;&amp;gt; invokeAll(Collection&amp;lt;? extends Callable&amp;lt;T&amp;gt;&amp;gt; tasks, &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; timeout, TimeUnit unit) &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Executors&quot;&gt;&lt;a href=&quot;#Executors&quot; class=&quot;headerlink&quot; title=&quot;Executors&quot;&gt;&lt;/a&gt;Executors&lt;/h2&gt;&lt;p&gt;Executors 是一个工具类，类似于 Collections。提供工厂方法来创建不同类型的线程池，比如 FixedThreadPool 或 CachedThreadPool。&lt;/p&gt;
&lt;p&gt;Executors 部分代码：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Executors&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ExecutorService &lt;span class=&quot;title&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nThreads)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadPoolExecutor(nThreads, nThreads, &lt;span class=&quot;number&quot;&gt;0L&lt;/span&gt;, TimeUnit.MILLISECONDS,&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;Runnable&amp;gt;());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ExecutorService &lt;span class=&quot;title&quot;&gt;newCachedThreadPool&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadPoolExecutor(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, Integer.MAX_VALUE, &lt;span class=&quot;number&quot;&gt;60L&lt;/span&gt;, TimeUnit.SECONDS, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SynchronousQueue&amp;lt;Runnable&amp;gt;());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面详细看一下三者的区别：&lt;/p&gt;
&lt;h2 id=&quot;Executor-vs-ExecutorService-vs-Executors&quot;&gt;&lt;a href=&quot;#Executor-vs-ExecutorService-vs-Executors&quot; class=&quot;headerlink&quot; title=&quot;Executor vs ExecutorService vs Executors&quot;&gt;&lt;/a&gt;Executor vs ExecutorService vs Executors&lt;/h2&gt;&lt;p&gt;正如上面所说，这三者均是 Executor 框架中的一部分。Java 开发者很有必要学习和理解他们，以便更高效的使用 Java 提供的不同类型的线程池。总结一下这三者间的区别，以便大家更好的理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Executor 和 ExecutorService 这两个接口主要的区别是：ExecutorService 接口继承了 Executor 接口，是 Executor 的子接口&lt;/li&gt;
&lt;li&gt;Executor 和 ExecutorService 第二个区别是：Executor 接口定义了 &lt;code&gt;execute()&lt;/code&gt;方法用来接收一个&lt;code&gt;Runnable&lt;/code&gt;接口的对象，而 ExecutorService 接口中的 &lt;code&gt;submit()&lt;/code&gt;方法可以接受&lt;code&gt;Runnable&lt;/code&gt;和&lt;code&gt;Callable&lt;/code&gt;接口的对象。&lt;/li&gt;
&lt;li&gt;Executor 和 ExecutorService 接口第三个区别是 Executor 中的 &lt;code&gt;execute()&lt;/code&gt; 方法不返回任何结果，而 ExecutorService 中的 &lt;code&gt;submit()&lt;/code&gt;方法可以通过一个 Future 对象返回运算结果。&lt;/li&gt;
&lt;li&gt;Executor 和 ExecutorService 接口第四个区别是除了允许客户端提交一个任务，ExecutorService 还提供用来控制线程池的方法。比如：调用 &lt;code&gt;shutDown()&lt;/code&gt; 方法终止线程池。可以通过 &lt;a href=&quot;http://www.amazon.com/dp/0321349601/?tag=javamysqlanta-20&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Java Concurrency in Practice》&lt;/a&gt; 一书了解更多关于关闭线程池和如何处理 pending 的任务的知识。&lt;/li&gt;
&lt;li&gt;Executors 类提供工厂方法用来创建不同类型的线程池。比如: &lt;code&gt;newSingleThreadExecutor()&lt;/code&gt; 创建一个只有一个线程的线程池，&lt;code&gt;newFixedThreadPool(int numOfThreads)&lt;/code&gt;来创建固定线程数的线程池，&lt;code&gt;newCachedThreadPool()&lt;/code&gt;可以根据需要创建新的线程，但如果已有线程是空闲的会重用已有线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;下表列出了 Executor 和 ExecutorService 的区别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Executor&lt;/th&gt;
&lt;th&gt;ExecutorService&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Executor 是 Java 线程池的核心接口，用来并发执行提交的任务&lt;/td&gt;
&lt;td&gt;ExecutorService 是 Executor 接口的扩展，提供了异步执行和关闭线程池的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;提供execute()方法用来提交任务&lt;/td&gt;
&lt;td&gt;提供submit()方法用来提交任务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execute()方法无返回值&lt;/td&gt;
&lt;td&gt;submit()方法返回Future对象，可用来获取任务执行结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;不能取消任务&lt;/td&gt;
&lt;td&gt;可以通过Future.cancel()取消pending中的任务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;没有提供和关闭线程池有关的方法&lt;/td&gt;
&lt;td&gt;提供了关闭线程池的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;译者注&quot;&gt;&lt;a href=&quot;#译者注&quot; class=&quot;headerlink&quot; title=&quot;译者注&quot;&gt;&lt;/a&gt;译者注&lt;/h2&gt;&lt;p&gt;个人觉得，利用 Executors 类提供的工厂方法来创建一个线程池是很方便，但对于需要根据实际情况自定义线程池某些参数的场景，就不太适用了。&lt;/p&gt;
&lt;p&gt;举个例子：&lt;br&gt;当线程池中的线程均处于工作状态，并且线程数已达线程池允许的最大线程数时，就会采取指定的饱和策略来处理新提交的任务。总共有四种策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AbortPolicy: 直接抛异常&lt;/li&gt;
&lt;li&gt;CallerRunsPolicy: 用调用者的线程来运行任务&lt;/li&gt;
&lt;li&gt;DiscardOldestPolicy: 丢弃线程队列里最近的一个任务，执行新提交的任务&lt;/li&gt;
&lt;li&gt;DiscardPolicy 直接将新任务丢弃&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果使用 Executors 的工厂方法创建的线程池，那么饱和策略都是采用默认的 AbortPolicy，所以如果我们想当线程池已满的情况，使用调用者的线程来运行任务，就要自己创建线程池，指定想要的饱和策略，而不是使用 Executors 了。&lt;/p&gt;
&lt;p&gt;所以我们可以根据需要创建 ThreadPoolExecutor(ExecutorService接口的实现类) 对象，自定义一些参数，而不是调用 Executors 的工厂方法创建。&lt;/p&gt;
&lt;p&gt;当然，在使用 Spring 框架的项目中，也可以使用 Spring 提供的 ThreadPoolTaskExecutor 类来创建线程池。ThreadPoolTaskExecutor 与 ThreadPoolExecutor 类似，也提供了许多参数用来自定义线程池，比如：核心线程池大小，线程池最大数量，饱和策略，线程活动保持时间等等。&lt;/p&gt;
&lt;h2 id=&quot;相关文档&quot;&gt;&lt;a href=&quot;#相关文档&quot; class=&quot;headerlink&quot; title=&quot;相关文档&quot;&gt;&lt;/a&gt;相关文档&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Executors java api doc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;搁了好久没更博客，再不写要被某人 BS 了，咦。。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://javarevisited.blogspot.jp/2017/02/difference-between-executor-executorservice-and-executors-in-java.html&quot;&gt;原文链接&lt;/a&gt;  &lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>谈谈 NoSuchBeanDefinitionException</title>
    <link href="http://yemengying.com/2017/02/18/something-about-noSuchBeanDefinitionException/"/>
    <id>http://yemengying.com/2017/02/18/something-about-noSuchBeanDefinitionException/</id>
    <published>2017-02-18T07:55:50.000Z</published>
    <updated>2018-12-13T04:05:10.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;这篇博客是来自对两篇文章的翻译，原文链接如下。这两篇文章都总结了在使用 Spring 框架时可能造成 &lt;code&gt;NoSuchBeanDefinitionException&lt;/code&gt; 的情况，以及应该如何解决。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;  
&lt;h2 id=&quot;原文链接&quot;&gt;&lt;a href=&quot;#原文链接&quot; class=&quot;headerlink&quot; title=&quot;原文链接&quot;&gt;&lt;/a&gt;原文链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/39173982/what-is-a-nosuchbeandefinitionexception-and-how-do-i-fix-it&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;java - What is a NoSuchBeanDefinitionException and how do I fix it? - Stack Overflow&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.baeldung.com/spring-nosuchbeandefinitionexception&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring NoSuchBeanDefinitionException | Baeldung&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;code&gt;org.springframework.beans.factory.NoSuchBeanDefinitionException&lt;/code&gt; 是很常见的异常，可以说绝大多数使用过 Spring 的人都曾遇到过它。本文旨在总结下NoSuchBeanDefinitionException（以下简称 NSBDE）的含义，哪些情况下可能抛出 NSBDE，和如何解决（文中配置均用 JavaConfig）。&lt;/p&gt;
&lt;h2 id=&quot;什么是-NoSuchBeanDefinitionException&quot;&gt;&lt;a href=&quot;#什么是-NoSuchBeanDefinitionException&quot; class=&quot;headerlink&quot; title=&quot;什么是 NoSuchBeanDefinitionException&quot;&gt;&lt;/a&gt;什么是 NoSuchBeanDefinitionException&lt;/h2&gt;&lt;p&gt;从字面其实就很好理解，NoSuchBeanDefinitionException 就是没有找到指定 Bean 的 Definition。NoSuchBeanDefinitionException 的 JavaDoc是这样定义的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exception thrown when a BeanFactory is asked for a bean instance for which it cannot find a definition. This may point to a non-existing bean, a non-unique bean, or a manually registered singleton instance without an associated bean definition.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面看看可能抛出 NSBDE 的一些情况。&lt;/p&gt;
&lt;h2 id=&quot;情况1-No-qualifying-bean-of-type-…-found-for-dependency&quot;&gt;&lt;a href=&quot;#情况1-No-qualifying-bean-of-type-…-found-for-dependency&quot; class=&quot;headerlink&quot; title=&quot;情况1: No qualifying bean of type […] found for dependency&quot;&gt;&lt;/a&gt;情况1: No qualifying bean of type […] found for dependency&lt;/h2&gt;&lt;p&gt;最常见的抛出 NSBDE 的情况就是在一个 BeanA 中注入 BeanB 时找不到  BeanB 的定义。例子如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanA&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; BeanB dependency;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当在 BeanA 中注入 BeanB 时，如果在 Spring 上下文中找不到 BeanB 的定义，就会抛出 NSBDE。异常信息如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;org.springframework.beans.factory.NoSuchBeanDefinitionException: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;No qualifying bean of type [org.baeldung.packageB.BeanB]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  found for dependency: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;expected at least 1 bean which qualifies as&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  autowire candidate for this dependency. &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Dependency annotations: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123;@org.springframework.beans.factory.annotation.Autowired(required=true)&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;抛异常的原因在异常信息中说的很清楚：&lt;code&gt;expected at least 1 bean which qualifies as autowire candidate for this dependency&lt;/code&gt;。所以要么是 BeanB 不存在在 Spring 上下文中（比如没有标注 @ Component，@Repository，@Service, @Controller等注解） ，要么就是 BeanB 所在的包没有被 Spring 扫描到。&lt;/p&gt;
&lt;p&gt;解决办法就是先确认 BeanB 有没有被某些注解声明为 Bean：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; org.baeldung.packageB;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanB&lt;/span&gt; &lt;/span&gt;&amp;#123; ...&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果 BeanB 已经被声明为一个 Bean，就再确认 BeanB 所在的包有没有被扫描。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@ComponentScan&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;org.baeldung.packageB&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ContextWithJavaConfig&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;情况2-No-qualifying-bean-of-type-…-is-defined&quot;&gt;&lt;a href=&quot;#情况2-No-qualifying-bean-of-type-…-is-defined&quot; class=&quot;headerlink&quot; title=&quot;情况2: No qualifying bean of type […] is defined&quot;&gt;&lt;/a&gt;情况2: No qualifying bean of type […] is defined&lt;/h2&gt;&lt;p&gt;还有一种可能抛出 NSBDE 的情况是在上下文中存在着两个 Bean，比如有一个接口 IBeanB，它有两个实现类 BeanB1 和 BeanB2。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanB1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IBeanB&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanB2&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IBeanB&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在，如果 BeanA 按照下面的方式注入，那么 Spring 将不知道要注入两个实现中的哪一个，就会抛出 NSBDE。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanA&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; IBeanB dependency;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;异常信息如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;No qualifying bean of type&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [org.baeldung.packageB.IBeanB] is defined: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;expected single matching bean but found 2: beanB1,beanB2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;仔细看异常信息会发现，并不是直接抛出 NSBDE，而是它的子类 &lt;code&gt;NoUniqueBeanDefinitionException&lt;/code&gt;，这是 Spring 3.2.1 之后引入的新异常，目的就是为了和第一种找不到 Bean Definition 的情况作区分。&lt;/p&gt;
&lt;p&gt;解决办法1就是利用 &lt;code&gt;@Qualifier&lt;/code&gt; 注解，明确指定要注入的 Bean 的名字(BeanB2 默认的名字就是 beanB2)。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanA&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Qualifier&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;beanB2&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; IBeanB dependency;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;除了指定名字，我们还可以将其中一个 Bean 加上 &lt;code&gt;@Primary&lt;/code&gt;的注解,这样会选择加了 Primary 注解的 Bean 来注入，而不会抛异常：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Primary&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanB1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IBeanB&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样 Spring 就能够知道到底应该注入哪个 Bean 了。&lt;/p&gt;
&lt;h2 id=&quot;情况3-No-Bean-Named-…-is-defined&quot;&gt;&lt;a href=&quot;#情况3-No-Bean-Named-…-is-defined&quot; class=&quot;headerlink&quot; title=&quot;情况3: No Bean Named […] is defined&quot;&gt;&lt;/a&gt;情况3: No Bean Named […] is defined&lt;/h2&gt;&lt;p&gt;NSBDE 还可能在从 Spring 上下文中通过名字获取一个 Bean 时抛出。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InitializingBean&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ApplicationContext context;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;afterPropertiesSet&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        context.getBean(&lt;span class=&quot;string&quot;&gt;&quot;someBeanName&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这种情况中，如果找不到指定名字 Bean 的 Definition，就会抛出如下异常：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;No bean named &amp;apos;someBeanName&amp;apos; is defined&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;情况4-代理-Beans&quot;&gt;&lt;a href=&quot;#情况4-代理-Beans&quot; class=&quot;headerlink&quot; title=&quot;情况4: 代理 Beans&quot;&gt;&lt;/a&gt;情况4: 代理 Beans&lt;/h2&gt;&lt;p&gt;Spring 通过 &lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html#aop-introduction-proxies&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AOP 代理&lt;/a&gt; 实现了许多高级功能，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Transactional&lt;/a&gt;完成 &lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/transaction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;事务管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;通过 &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Cacheable&lt;/a&gt;实现缓存&lt;/li&gt;
&lt;li&gt;通过 &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Async&lt;/a&gt;和 &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Scheduled.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Scheduled&lt;/a&gt;实现任务调度和异步执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring 有两种方式实现代理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JDK 动态代理机制&lt;/a&gt; ，在运行时为&lt;code&gt;实现了某些接口&lt;/code&gt;的类动态创建一个实现了同样接口的代理对象。&lt;/li&gt;
&lt;li&gt;使用 &lt;a href=&quot;https://github.com/cglib/cglib/wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CGLIB&lt;/a&gt;，CGLIB 可以在运行期扩展Java类与实现Java接口,也就是说当一个类没有实现接口时，必须用 CGLIB 生成代理对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以，当 Spring 上下文中的一个实现了某个接口的 Bean 通过JDK 动态代理机制被代理时，代理类并不是继承了目标类，而是实现同样的接口。&lt;/p&gt;
&lt;p&gt;也正因为如此，如果一个 Bean 通过接口注入时，可以成功被注入。但如果是通过真正的类注入，那么 Spring 将无法找到匹配这个类的 Definition——因为代理类并没有继承这个类。&lt;/p&gt;
&lt;p&gt;以 Spring 中比较常见的事务管理为例，假设 ServiceA 中要注入 ServiceB，两个 Service 均标注了 &lt;code&gt;@Transactional&lt;/code&gt;注解来进行事务管理，那么下面的注入方式是不会正常 work 的。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Service&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Transactional&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServiceA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IServiceA&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ServiceB serviceB;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Service&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Transactional&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServiceB&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IServiceB&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;解决办法就是通过接口来进行注入：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Service&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Transactional&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServiceA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IServiceA&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; IServiceB serviceB;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Service&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Transactional&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServiceB&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IServiceB&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;今天天气好好啊~&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/8d2d2aba/0fdb443c.jpg&quot; alt=&quot;小脑腐&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇博客是来自对两篇文章的翻译，原文链接如下。这两篇文章都总结了在使用 Spring 框架时可能造成 &lt;code&gt;NoSuchBeanDefinitionException&lt;/code&gt; 的情况，以及应该如何解决。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yemengying.com/categories/spring/"/>
    
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMq 如何处理异常</title>
    <link href="http://yemengying.com/2017/01/30/how-does-rabbitmq-handle-exception/"/>
    <id>http://yemengying.com/2017/01/30/how-does-rabbitmq-handle-exception/</id>
    <published>2017-01-30T11:37:21.000Z</published>
    <updated>2018-12-13T04:10:36.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;这应该是过年假期的最后一篇，如果不是，那你一定看到了假博客。(๑•̀ㅂ•́)و✧  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在消费 RabbitMq 中的 Message 时，常常会出现异常，可能是 Message 本身格式不对，或者由于某些原因无法被处理。我一般都是 catch 异常然后抛个 &lt;code&gt;AmqpRejectAndDontRequeueException&lt;/code&gt;  (以下简称 ARADRE )，也出啥问题，不过还是仔细看下，rabbitmq 是如何对待消费消息时出现的异常，是会将消息直接丢弃还是有其他操作。&lt;/p&gt;
&lt;p&gt;其实 Spring-amqp &lt;a href=&quot;http://docs.spring.io/spring-amqp/reference/html/_reference.html#exception-handling&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;上对于 RabbitMq 是如何处理异常的说的已经很明白了，不过都是大段的文字可能不太好理解，还是配着代码看一下。&lt;/p&gt;
&lt;p&gt;代码版本： 1.6.3.RELEASE&lt;/p&gt;
&lt;p&gt;根据官方文档，当 listener 在消费消息时抛出一个异常的时候，该异常会被包装在 &lt;code&gt;ListenerExecutionFailedException&lt;/code&gt; 中抛出，并根据 &lt;code&gt;listenerContainer&lt;/code&gt; 中 &lt;code&gt;defaultRequeueRejected&lt;/code&gt; 设定的值来决定是否将该消息重新加入队列，默认是会重新加入队列。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/1ef2b0c3/ae31063d.jpg&quot; alt=&quot;ListenerExecutionFailedException结构&quot;&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，如果抛出的异常是 ARADRE 或其他被 RabbitMq 认为是致命错误的异常，即便 defaultRequeueRejected 的值为 true ， 该消息也不会重新加入队列，而是会被直接丢弃或加入 dead-letter-exchange 中(如果有配置 dead-letter-exchange)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/1a0a19a6/1c5104d9.jpeg&quot; alt=&quot;来源https://derickbailey.com/2016/03/28/dealing-with-dead-letters-and-poison-messages-in-rabbitmq/&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 1.6.3. RELEASE 中被 RabbitMq 认为是致命错误的异常有以下 6 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;o.s.amqp…MessageConversionException&lt;/li&gt;
&lt;li&gt;o.s.messaging…MessageConversionException&lt;/li&gt;
&lt;li&gt;o.s.messaging…MethodArgumentNotValidException&lt;/li&gt;
&lt;li&gt;o.s.messaging…MethodArgumentTypeMismatchException&lt;/li&gt;
&lt;li&gt;java.lang.NoSuchMethodException&lt;/li&gt;
&lt;li&gt;java.lang.ClassCastException&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是说，当抛出以上异常及 ARADRE 时，该消息一定不会重新入队，即便 defaultRequeueRejected 的值为 true。&lt;/p&gt;
&lt;p&gt;下面看看 Spring-RabbitMq 是如何实现的：&lt;/p&gt;
&lt;p&gt;在源码中，异常在 &lt;code&gt;AbstractMessageListenerContainer&lt;/code&gt; 中被包装在 ListenerExecutionFailedException 中之后还会经由 &lt;code&gt;ErrorHandler&lt;/code&gt; 的 &lt;code&gt;handleError&lt;/code&gt; 方法处理， 默认的 ErrorHandler 是 &lt;code&gt;ConditionalRejectingErrorHandler&lt;/code&gt; 。 &lt;/p&gt;
&lt;p&gt;我们也可以实现自己的 ErrorHandler 来控制需要丢弃消息的异常，只要实现  &lt;code&gt;org.springframework.util.ErrorHandler&lt;/code&gt; 接口，然后将&lt;code&gt;listenerContainer&lt;/code&gt; 中的 &lt;code&gt;errorHandler&lt;/code&gt; 参数指定我们自定义的 handler 即可。 &lt;/p&gt;
&lt;p&gt;ConditionalRejectingErrorHandler 中配置有 &lt;code&gt;FatalExceptionStrategy&lt;/code&gt;，会调用 FatalExceptionStrategy 中的 isFatal 方法来判断异常是不是属于致命异常。&lt;/p&gt;
&lt;p&gt;ConditionalRejectingErrorHandler 的具体实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConditionalRejectingErrorHandler&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ErrorHandler&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; FatalExceptionStrategy exceptionStrategy;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.logger.isWarnEnabled()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.logger.warn(&lt;span class=&quot;string&quot;&gt;&quot;Execution of Rabbit message listener failed.&quot;&lt;/span&gt;, t);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 如果是致命异常，则转为 AmqpRejectAndDontRequeueException 抛出&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.causeChainContainsARADRE(t) &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.exceptionStrategy.isFatal(t)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AmqpRejectAndDontRequeueException(&lt;span class=&quot;string&quot;&gt;&quot;Error Handler converted exception to fatal&quot;&lt;/span&gt;, t);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; true if the cause chain already contains an&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; AmqpRejectAndDontRequeueException&amp;#125;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;causeChainContainsARADRE&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Throwable cause = t.getCause();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (cause != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cause &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; AmqpRejectAndDontRequeueException) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		cause = cause.getCause();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Default implementation of &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; FatalExceptionStrategy&amp;#125;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@since&lt;/span&gt; 1.6.3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DefaultExceptionStrategy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FatalExceptionStrategy&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 判断传入参数 是不是 致命异常&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isFatal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (t &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; ListenerExecutionFailedException&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&amp;amp;&amp;amp; isCauseFatal(t.getCause())) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ConditionalRejectingErrorHandler.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.logger.isWarnEnabled()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				ConditionalRejectingErrorHandler.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.logger.warn(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;							&lt;span class=&quot;string&quot;&gt;&quot;Fatal message conversion error; message rejected; &quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;							+ &lt;span class=&quot;string&quot;&gt;&quot;it will be dropped or routed to a dead letter exchange, if so configured: &quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;							+ ((ListenerExecutionFailedException) t).getFailedMessage());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isCauseFatal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable cause)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cause &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; MessageConversionException&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				|| cause &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; org.springframework.messaging.converter.MessageConversionException&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				|| cause &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; MethodArgumentNotValidException&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				|| cause &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; MethodArgumentTypeMismatchException&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				|| cause &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; NoSuchMethodException&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				|| cause &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; ClassCastException&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				|| isUserCauseFatal(cause);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 * 通过重写该方法来添加自定义的异常&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 * Subclasses can override this to add custom exceptions.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; cause the cause&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; true if the cause is fatal.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isUserCauseFatal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable cause)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码比较长，简单来说，就是 ConditionalRejectingErrorHandler 的 handleError 会先判断接到的异常中的 cause 是不是 ARADRE，如果不是再调用 FatalExceptionStrategy 的 isFatal 方法，判断是不是致命异常中的一种，如果是，则将异常转为 ARADRE 抛出，该消息也就不会重新入队。&lt;/p&gt;
&lt;p&gt;如果想要把自定义的异常加入到 fatalException， 一个简单的办法就是提供新的 FatalExceptionStrategy ，只要继承 ConditionalRejectingErrorHandler.DefaultExceptionStrategy 并重写 isUserCauseFatal(Throwable cause) 方法，在方法里对于需要丢弃消息的异常返回 true即可。&lt;/p&gt;
&lt;p&gt;再简单看下，RabbitMq 判断是否需要将消息重入队列的部分逻辑。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// We should always requeue if the container was stopping&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; shouldRequeue = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.defaultRequeuRejected || ex &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; MessageRejectedWhileStoppingException;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Throwable t = ex;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (shouldRequeue &amp;amp;&amp;amp; t != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (t &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; AmqpRejectAndDontRequeueException) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			shouldRequeue = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	t = t.getCause();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据上面的代码，如果处理消息时出现异常，在判断是否需要入队时，会将 shouldRequeue 变量等于 this.defaultRequeuRejected ||ex instanceof MessageRejectedWhileStoppingException 的值，然后如果异常是 ARADRE， 不管之前 shouldRequeue 的值是什么，都会被置为 false。最后根据 shouldRequeue 的值来决定是否需要重新入队。 &lt;/p&gt;
&lt;p&gt;可以用下图总结一下：&lt;br&gt;&lt;img src=&quot;//yemengying.com/qiniu/image/2017-02-05-j%20-1-.png?imageMogr2/thumbnail/667x618!&quot; alt=&quot;总结&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后。。Cookie 宝宝祝大家新春快乐~~&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/6bcb0d8b/1461eb70.jpg&quot; alt=&quot;cookie 宝宝&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这应该是过年假期的最后一篇，如果不是，那你一定看到了假博客。(๑•̀ㅂ•́)و✧  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="rabbitmq" scheme="http://yemengying.com/categories/rabbitmq/"/>
    
    
      <category term="rabbitmq" scheme="http://yemengying.com/tags/rabbitmq/"/>
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>为Rabbitmq中的Jackson2JsonMessageConverter自定义ClassMapper</title>
    <link href="http://yemengying.com/2017/01/03/rabbitmq-classMapper/"/>
    <id>http://yemengying.com/2017/01/03/rabbitmq-classMapper/</id>
    <published>2017-01-03T14:40:30.000Z</published>
    <updated>2018-12-13T04:11:34.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;新年第一篇~~ 🐣🐥🐤🐔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;消息队列算是各个系统间通信比较常见的方式了。我们公司用的是是基于 AMQP 协议的 &lt;a href=&quot;http://www.rabbitmq.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RabbitMq&lt;/a&gt;。在 Spring-AMQP 中比较重要的类就是 &lt;code&gt;Message&lt;/code&gt;，因为要发送的消息必须要构造成一个 Message 对象来进行传输。Message 对象包括两部分 Body 和 Properties，Body 就是真正要发送的消息内容，Properties 就是和消息相关的一些属性(消息头，要发送的交换机，routingKey等等)，主要结构如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Message&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; MessageProperties messageProperties;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] body;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;消息生产者构造好 Message 之后，就会将 Message 发送到指定的 Exchange (交换机)，再根据 Exchange 的类型及 routing-key 将消息路由到相应的 queue 中，最后被监听该 queue 的消费者消费，大致如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/d22db668/11c183f2.jpg&quot; alt=&quot;流程1&quot;&gt;&lt;/p&gt;
&lt;p&gt;不过每次发消息都要自己构造 Message 对象比较麻烦。Spring-AMQP 允许我们直接使用自定义的类，然后会利用指定好的 &lt;code&gt;MessageConverter&lt;/code&gt; 将自定义的类转换为 Message 进行发送，在接收时也会利用 MessageConverter 将接收到的 Message 对象转成需要的对象。Spring-AMQP 提供了多种 MessageConverter，比如 SimpleMessageConverter，SerializerMessageConverter，Jackson2JsonMessageConverter，MarshallingMessageConverter等等，如果发送的消息对象不是 Message 实例，并且没有指定 MessageConverter 的话，默认用 SimpleMessageConverter。以上各种 MessageConverter 归根结底都是实现了 MessageConverter 接口，该接口只有两个方法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MessageConverter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;Message &lt;span class=&quot;title&quot;&gt;toMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object object, MessageProperties messageProperties)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; MessageConversionException&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;Object &lt;span class=&quot;title&quot;&gt;fromMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Message message)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; MessageConversionException&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这两个方法一个是在发送消息时将我们的消息对象转换成标准的 Message 对象，另一个是在接受消息时将 Message 对象转换为相应的对象。&lt;br&gt;比较常用的 Converter 就是 Jackson2JsonMessageConverter(以下简称 JsonMessageConverter)，在发送消息时，它会先将自定义的消息类序列化成json格式，再转成byte构造 Message，在接收消息时，会将接收到的 Message 再反序列化成自定义的类。大致流程如下图：&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/9900549c/d73e4d16.jpg&quot; alt=&quot;流程2&quot;&gt;&lt;/p&gt;
&lt;p&gt;不过使用 JsonMessageConverter 时有一个小问题，在&lt;code&gt;不对它进行任何改造的前提下&lt;/code&gt;，发送消息的类和接受消息的类必须是一样的，不仅是要里面的字段一样，类名一样，连类的包路径都要一样。&lt;/p&gt;
&lt;p&gt;所以当系统1使用 JsonMessageConverter 发送消息类A给系统2时，系统2可以有如下几种方式来接收：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.依赖系统1的jar包,直接使用类A来接收 &lt;/li&gt;
&lt;li&gt;2.不依赖系统1的jar包，自己建一个和A一模一样的类，连名称，包路径都一样&lt;/li&gt;
&lt;li&gt;3.负责监听 queue 的类实现 MessageListener 接口，直接接收 Message 类，再自己转换 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面三个方法都不是很好，按照正常的想法，我们肯定是期望系统2直接使用自己的类来接收就可以了，只要与A类的字段名一样即可。那有没有方法可以让系统2既不依赖无用的jar包，也不用建立个与自己命名规范不相符的类， 也无需自己转换呢?&lt;/p&gt;
&lt;p&gt;要解决这个问题，就要先看看 JsonMessageConverter 是如何将 Message 进行反序列化的。&lt;br&gt;在 JsonMessageConverter 的 fromMessage 方法中有这么一段:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (getClassMapper() == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	JavaType targetJavaType = getJavaTypeMapper()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		.toJavaType(message.getMessageProperties());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	content = convertBytesToObject(message.getBody(), encoding, targetJavaType);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Class&amp;lt;?&amp;gt; targetClass = getClassMapper().toClass(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		message.getMessageProperties());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	content = convertBytesToObject(message.getBody(), encoding, targetClass);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就是说默认情况下，JsonMessageConverter 使用的 ClassMapper 是 &lt;code&gt;DefaultJackson2JavaTypeMapper&lt;/code&gt;，在转换时通过 Message 的 Properties 来获取要转换的目标类的类型。通过 Debug 可以发现，目标类的类型是存储在 Message 的 Proterties 的 一个 headers 的 Map 中，Key 叫“__TypeId__”。所以只要想办法在传输消息时更改__TypeId__的值即可。&lt;/p&gt;
&lt;p&gt;下面是解决办法，在消息的生产者端为 JsonMessageConverter， 设置一个自定义的 ClassMapper，重写 fromClass 方法，将 __TypeId__ 的值设为消费端用来接收的类的路径+名称。当然了，也可以在消费者端重写toClass方法，直接返回想要转换的目标类的类类型。两种选一种就可以。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Jackson2JsonMessageConverter &lt;span class=&quot;title&quot;&gt;customConverter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Jackson2JsonMessageConverter converter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Jackson2JsonMessageConverter();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  converter.setClassMapper(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ClassMapper() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Class&amp;lt;?&amp;gt; toClass(MessageProperties properties) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; UnsupportedOperationException(&lt;span class=&quot;string&quot;&gt;&quot;this mapper is only for outbound, do not use for receive message&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fromClass&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class&amp;lt;?&amp;gt; clazz, MessageProperties properties)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      properties.setHeader(&lt;span class=&quot;string&quot;&gt;&quot;__TypeId__&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;com.xxx.B&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; converter;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;感觉自己语言组织能力退化了。。。。。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;新年第一篇~~ 🐣🐥🐤🐔&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="rabbitmq" scheme="http://yemengying.com/categories/rabbitmq/"/>
    
    
      <category term="rabbitmq" scheme="http://yemengying.com/tags/rabbitmq/"/>
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>log 不打印异常堆栈</title>
    <link href="http://yemengying.com/2016/12/18/log4j-not-printing-stacktrace-for-eception/"/>
    <id>http://yemengying.com/2016/12/18/log4j-not-printing-stacktrace-for-eception/</id>
    <published>2016-12-18T06:17:33.000Z</published>
    <updated>2018-12-13T04:14:48.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;和上篇内容并不重复 🙃&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;最近由于规则引擎有问题，导致产线上的一个 job 会抛 NullPointerException。本来这是个已知的问题，也没什么，已经联系对应的人去修复了。可由此发现了另外一个问题， fireman 的告警邮件只有异常的名称，而没有异常堆栈。&lt;br&gt;&lt;img src=&quot;//yemengying.com/qiniu/image/2016-12-18-Screen%20Shot%202016-12-18%20at%204.22.52%20PM.png&quot; alt=&quot;fireman&quot;&gt;&lt;/p&gt;
&lt;p&gt;这就很令人懵圈了，因为不知道是已知的规则引擎的问题还是其他问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/e0ffe3d5/b2e1a958.jpeg&quot; alt=&quot;？？&quot;&gt;&lt;/p&gt;
&lt;p&gt;先看了下对应 job 的代码，确认打印异常的姿势是正确的, 本地也可以正常打印。然后去搜了下对应日期的 log 文件，确实有一堆 NPE 的报错，不过惊喜的发现在一开始的时候其实是有打出堆栈的，只是到后面就没有了。&lt;/p&gt;
&lt;p&gt;最后终于在 &lt;a href=&quot;http://stackoverflow.com/questions/2295015/log4j-not-printing-the-stacktrace-for-exceptions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow&lt;/a&gt; 上找到了答案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The compiler in the server VM now provides correct stack backtraces for all “cold” built-in exceptions. For performance purposes, when such an exception is thrown a few times, the method may be recompiled. After recompilation, the compiler may choose a faster tactic using preallocated exceptions that do not provide a stack trace. To disable completely the use of preallocated exceptions, use this new flag: -XX:-OmitStackTraceInFastThrow.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;个人理解就是，JVM 为了性能会做优化，如果频繁的抛出某个异常，会重新编译，不再打印异常堆栈。&lt;br&gt;解决这个问题也比较简单，如果不想每次都去查前面的 log 去看堆栈，只要在启动参数加上 &lt;code&gt;-XX:-OmitStackTraceInFastThrow&lt;/code&gt;，就可以禁用该优化，强制打印异常堆栈。这样可能会导致，log 文件过大，不过产线上今天之前的 log 文件都会被压缩，所以感觉问题也不大。&lt;/p&gt;
&lt;p&gt;Ps:用 iPic 上传图片真是好用到飞起，非常适合我这种喜欢插图星人，多谢洪菊的良心推荐。&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/f74936ec/a339d728.png&quot; alt=&quot;敲好用&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;和上篇内容并不重复 🙃&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Clean Code, Clean Log</title>
    <link href="http://yemengying.com/2016/11/18/clean-code-clean-log/"/>
    <id>http://yemengying.com/2016/11/18/clean-code-clean-log/</id>
    <published>2016-11-18T03:14:13.000Z</published>
    <updated>2018-12-13T04:20:09.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;最近提的 PR 都有关于 Log 的 comment，不能忍，以下内容总结整理自明佳的 Comment 和网络资料，只是为了以后提 PR 之前过来扫一眼，尽量避免 Log 上的疏忽，不一定适用于所有人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在程序中的适当位置打 Log 的重要性就不用多说了，很多人应该都体会过线上有 Bug 却由于没有打 log 而不好 troubleshooting 的经历。&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/52d605e4/06ead603.gif&quot; alt=&quot;T^T&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;相关文档（康桑哈密达）&quot;&gt;&lt;a href=&quot;#相关文档（康桑哈密达）&quot; class=&quot;headerlink&quot; title=&quot;相关文档（康桑哈密达）&quot;&gt;&lt;/a&gt;相关文档（康桑哈密达）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.nurkiewicz.com/2010/05/clean-code-clean-logs-use-appropriate.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clean code, clean logs&lt;/a&gt;(👍很赞)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;SLF4J-VS-Log4J&quot;&gt;&lt;a href=&quot;#SLF4J-VS-Log4J&quot; class=&quot;headerlink&quot; title=&quot;SLF4J VS Log4J&quot;&gt;&lt;/a&gt;SLF4J VS Log4J&lt;/h3&gt;&lt;p&gt;有很多关于打 Log 的第三方库，也没有多研究过，接触过的就是 &lt;code&gt;SLF4J&lt;/code&gt; 和 &lt;code&gt;Log4J&lt;/code&gt; 了，不过墙裂建议用 &lt;a href=&quot;http://www.slf4j.org/manual.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SLF4J&lt;/a&gt;，使用占位符 {} 真的比加号拼接字符串可读性提高N倍啊！！！&lt;/p&gt;
&lt;p&gt;感受一下&amp;lt;(￣︶￣)&amp;gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// SLF4J, good&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log.error(&lt;span class=&quot;string&quot;&gt;&quot;Invest loan failed, loan Id: &amp;#123;&amp;#125;, error: &amp;#123;&amp;#125;&quot;&lt;/span&gt;, loanId, errorMsg);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Log4J, bad&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log.error(&lt;span class=&quot;string&quot;&gt;&quot;Invest loan failed, loan Id:&quot;&lt;/span&gt; + loanId + &lt;span class=&quot;string&quot;&gt;&quot; error: &quot;&lt;/span&gt; + errorMsg);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然，SLF4J 还有其他的优点，比如不用字符串拼接，节省了创建 String 对象所耗费的资源之类的。不过我最看重的就是可读性高了。&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/ab4a80e5/6c60836c.gif&quot; alt=&quot;喵喵呜&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Logging-Level&quot;&gt;&lt;a href=&quot;#Logging-Level&quot; class=&quot;headerlink&quot; title=&quot;Logging Level&quot;&gt;&lt;/a&gt;Logging Level&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ERROR - 记录一些比较严重的错误，比如一些严重异常，数据库链接不可用等等&lt;/li&gt;
&lt;li&gt;WARN - 记录一些系统可以容忍的异常，或者是一些警示信息。比如:”Current data unavailable, using cached values”。&lt;/li&gt;
&lt;li&gt;INFO - 记录一些比较重要的操作，能反映程序运行状态的。比如:”[Who] booked ticket from [Where] to [Where]”&lt;/li&gt;
&lt;li&gt;DEBUG - 一些帮助调试的信息&lt;/li&gt;
&lt;li&gt;TRACE - 嗯，这个级别俺也没用过。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Pay-attention&quot;&gt;&lt;a href=&quot;#Pay-attention&quot; class=&quot;headerlink&quot; title=&quot;Pay attention&quot;&gt;&lt;/a&gt;Pay attention&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Log 信息首字母大写&lt;br&gt;这点完全是为了看上去舒服，至于到底需不需要大写，见仁见智吧~，不过我还是要注意一下，要大写。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log.error(&lt;span class=&quot;string&quot;&gt;&quot;Invest loan failed, loan Id: &amp;#123;&amp;#125;, error: &amp;#123;&amp;#125;&quot;&lt;/span&gt;, loanId, errorMsg);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log.error(&lt;span class=&quot;string&quot;&gt;&quot;invest loan failed, loan Id: &amp;#123;&amp;#125;, error: &amp;#123;&amp;#125;&quot;&lt;/span&gt;, loanId, errorMsg);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免 Log 中的 NullPointerException&lt;br&gt;如果像下面这样记 Log，要注意确保 loan 不会为null, 不然打 Log 时抛个 NPE，想想就蛋疼。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;log.info(&lt;span class=&quot;string&quot;&gt;&quot;Invest loan : &amp;#123;&amp;#125;&quot;&lt;/span&gt;, loan.getId());&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Log 的信息简洁有用&lt;br&gt;Log 的内容一定要是有用的，能反映出程序的运行状态，能帮助定位错误。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log.info(&lt;span class=&quot;string&quot;&gt;&quot;Invest loan with id:&amp;#123;&amp;#125;&quot;&lt;/span&gt;, loanId);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log.info(&lt;span class=&quot;string&quot;&gt;&quot;Invest loan&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;记录某些方法的入参和出参&lt;br&gt;记录方法的入参和出参，也可以帮助我们定位问题。特别是调用提供接口给其他系统调用的时候，记录入参可以帮助分辨到底是谁的锅🌚。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;printDocument&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Document doc, Mode mode)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  log.debug(&lt;span class=&quot;string&quot;&gt;&quot;Entering printDocument(doc=&amp;#123;&amp;#125;, mode=&amp;#123;&amp;#125;)&quot;&lt;/span&gt;, doc, mode);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  String id = &lt;span class=&quot;comment&quot;&gt;//Lengthy printing operation&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  log.debug(&lt;span class=&quot;string&quot;&gt;&quot;Leaving printDocument(): &amp;#123;&amp;#125;&quot;&lt;/span&gt;, id);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;合适的记录异常&lt;br&gt;大家都知道要在记录程序运行中抛出的异常，但有的时候方式可能是不对的。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NullPointerException(&lt;span class=&quot;string&quot;&gt;&quot;Just for test&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(e);        &lt;span class=&quot;comment&quot;&gt;//A &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(e, e);        &lt;span class=&quot;comment&quot;&gt;//B &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; + e);        &lt;span class=&quot;comment&quot;&gt;//C &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(e.toString());        &lt;span class=&quot;comment&quot;&gt;//D &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(e.getMessage());        &lt;span class=&quot;comment&quot;&gt;//E &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, e);        &lt;span class=&quot;comment&quot;&gt;//F &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, e);        &lt;span class=&quot;comment&quot;&gt;//G&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#125;&quot;&lt;/span&gt;, e);        &lt;span class=&quot;comment&quot;&gt;//H &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#125;&quot;&lt;/span&gt;, e.getMessage());        &lt;span class=&quot;comment&quot;&gt;//I &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(&lt;span class=&quot;string&quot;&gt;&quot;Error reading configuration file: &quot;&lt;/span&gt; + e);        &lt;span class=&quot;comment&quot;&gt;//J &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(&lt;span class=&quot;string&quot;&gt;&quot;Error reading configuration file: &quot;&lt;/span&gt; + e.getMessage());        &lt;span class=&quot;comment&quot;&gt;//K &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(&lt;span class=&quot;string&quot;&gt;&quot;Error reading configuration file&quot;&lt;/span&gt;, e);        &lt;span class=&quot;comment&quot;&gt;//L&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面 12 种打印异常的方式中，只有 G 和 L是正确的。A 和 B 在使用 SLF4J 时会编译不通过， 其他的几种要么不会打印异常堆栈，要么会打印出不正确的信息。比如，E 的方式只会打印”Just for test”的信息，而不会打印异常类型和异常堆栈。在 SLF4J 中，第一个参数是文本信息，简单描述一下异常；第二个参数要传异常本身，而不是&lt;code&gt;e.getMessage()&lt;/code&gt;或&lt;code&gt;e.toString()&lt;/code&gt;,这样才能打印出异常堆栈，方便定位问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望可以消灭和 Log 有关的 Comment。&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/872e177c/aa1c06dc.jpeg&quot; alt=&quot;biu biu biu~&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;欢迎指正错误，欢迎一起讨论~(≧▽≦)/~。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近提的 PR 都有关于 Log 的 comment，不能忍，以下内容总结整理自明佳的 Comment 和网络资料，只是为了以后提 PR 之前过来扫一眼，尽量避免 Log 上的疏忽，不一定适用于所有人。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>【转】EVE 早期成员面基</title>
    <link href="http://yemengying.com/2016/11/15/i-love-eve/"/>
    <id>http://yemengying.com/2016/11/15/i-love-eve/</id>
    <published>2016-11-15T05:12:46.000Z</published>
    <updated>2017-06-10T07:56:03.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;第一次转别人的博客，想看原文的请移步&lt;a href=&quot;http://kevin.doyeden.com/2016/11/13/with-sunshine-after-one-year/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;三“观”茅庐&lt;/a&gt;，我才不会告诉你们原文有大神高清无码照的！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;先说点自己想说的， EVE 是毕业后第一份工作做的第一个产品(也可以说第一份工作做得唯一的产品，后面的那个我实在不想承认是我写的🙄)，做 EVE 的那段日子是到目前为止毕业后最开心的时光，学习到了很多东西也认识了很多很棒的小伙伴，不过也就是因为那段时光太过美好，才导致在部门拆分，EVE 团队大换血之后萌生了离职的念头。唉，没有对比就没有伤害啊。不过还是很感谢前前司，老大还有磊哥收留技艺不精的我。&lt;/p&gt;
&lt;p&gt;上周和之前的 EVE 小伙伴搞了次聚餐，见到了一年多没见的 sunshine 大神，之前做 EVE 时，前期一直和大神联调，虽未看过大神的代码，但也在 API 文档评审时深刻感受到了大神的代码洁癖。嗯，有代码洁癖的人代码一定写的好。&lt;/p&gt;
&lt;p&gt;最后，希望下次聚餐可以听到大神讲段子😏。&lt;/p&gt;
&lt;p&gt;—————————————分割线，以下内容来自hongju’s blog—————————————————&lt;/p&gt;
&lt;p&gt;这次面基的成因主要还是因为前两天看微信通讯录，sunshine 大神的头像换成了一只狗。于是就聊了起来，然后就有了今晚的这次聚餐~ sunshine 大神去年离职后，大约在十月一之前聚过一次餐，当时住的也比较近，后来大神搬到浦东，于是一年未见。于是又约到阿姨，卢神，凑了一次烤肉。&lt;/p&gt;
&lt;p&gt;未经大神同意，先偷偷的放一张 sunshine 的照片吧~&lt;/p&gt;
&lt;p&gt;&amp;lt;此处应该有照片&amp;gt;&lt;/p&gt;
&lt;p&gt;大神，阿姨，卢神和我们当时一起做在 * 公司做 EVE 这款产品，阿姨和卢神是EVE的后端主力，sunshine 算是我的 mentor，带着我用 cordova 做客户端，说白了就是用 H5 技术来做客户端。那段日子学到了很多东西，sunshine 大神的代码一直很 clean，给我做了非常好的榜样。以至于这一年多来，没见过比大神更加干净的代码。也就说，当我看那些人代码的时候，抑制不住吐槽的情绪。在 sunshine 的良好影响下，我自己也尽量写最干净的代码。&lt;/p&gt;
&lt;p&gt;除了代码之外，sunshine 对技术的追求也给我树立了很好的榜样。其实，在公司就会感觉到很多人对技术仅限于表面，或者能用就行。一点点追求都没有，这点，很致命。&lt;/p&gt;
&lt;p&gt;说完技术，再说说 sunshine 大神的 RP，大神不仅技术也好，做朋友也很好。非常踏实，有追求，因此我觉得自己非常幸运，能在自己毕业正式签约的第一家公司就能遇到这么好的 mentor。可惜的是，sunshine 离职，丢下的 EVE 这款美丽的产品于不靠谱的 sjn 之手。这里不再吐槽了。最近得知，EVE 这款产品更名 **。靠！&lt;/p&gt;
&lt;p&gt;说完，sunshine ， 这篇文章基本就算完事了。&lt;/p&gt;
&lt;p&gt;EVE 的早期成员都是非常靠谱，小团队，又能成事，现在很多人离开了公司，一部分人也分布在不同的业务线上，并且都混得很不错。期待着，哪一天能再次聚在一起~也不枉一起为了 EVE 熬了许多夜。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第一次转别人的博客，想看原文的请移步&lt;a href=&quot;http://kevin.doyeden.com/2016/11/13/with-sunshine-after-one-year/&quot;&gt;三“观”茅庐&lt;/a&gt;，我才不会告诉你们原文有大神高清无码照的！！！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="转载" scheme="http://yemengying.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Something about Spring Transaction</title>
    <link href="http://yemengying.com/2016/11/14/something-about-spring-transaction/"/>
    <id>http://yemengying.com/2016/11/14/something-about-spring-transaction/</id>
    <published>2016-11-14T13:30:34.000Z</published>
    <updated>2018-12-13T04:23:34.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;记录一个上周遇到的小问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;后端开发免不了要和事务打交道，比较常用的就是利用 Spring 框架的声明式事务管理，简单的说就是在需要事务管理的类或方法上添加 &lt;code&gt;@Transactional&lt;/code&gt; 注解，然后在配置类上添加 &lt;code&gt;@EnableTransactionManagement&lt;/code&gt;注解(这里配置采用 JavaConfig 的方式，如果是 XML， 是要在 XML 文件中添加&lt;code&gt;&amp;lt;tx:annotation-driven/&amp;gt;&lt;/code&gt;)。然后 Spring 框架会利用 AOP 在相关方法调用的前后进行事务管理。&lt;/p&gt;
&lt;p&gt;一直以来也没出什么岔子，直到。。。。。。。。&lt;/p&gt;
&lt;p&gt;上周写了段大概长下面样纸的代码。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeServiceImpl&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Giraffe&amp;gt; giraffes)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Giraffe giraffe : giraffes) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      B(giraffe);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Transactional&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;transactionManager&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Giraffe giraffe)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 1: update something&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 2: insert something&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 3: update something&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;大概就是 Service 中有一个方法 A，会内部调用方法 B， 方法 A 没有事务管理，方法 B 采用了声明式事务，通过在方法上声明 Transactional 的注解来做事务管理。&lt;/p&gt;
&lt;p&gt;然鹅，通过下面的 Junit 测试方法 A 的时候发现方法 B 的事务并没有开启， 而直接调用方法 B 事务是正常开启的。 &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeServiceTest&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; GiraffeService giraffeService;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 没有开启事务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testA&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	giraffeService.A();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 正常开启事务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testB&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	giraffeService.B();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/42081bb5/9b2b2888.jpg&quot; alt=&quot;T^T&quot;&gt;&lt;/p&gt;
&lt;p&gt;问了下明佳和超哥之后，终于有点明白了🤔&lt;/p&gt;
&lt;p&gt;Spring 在加载目标 Bean 的时候，会为声明了 @Transactional 的 目标 Bean 创造一个代理类，而&lt;code&gt;目标类本身并不能感知到代理类的存在&lt;/code&gt;。调用通过 Spring 上下文注入的 Bean 的方法， 并不是直接调用目标类的方法。&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/72b75974/a642fa86.png&quot; alt=&quot;不是&quot;&gt;&lt;br&gt;而是先调用代理类的方法，再调用目标类的。&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/a08dbbac/a91d9ecf.png&quot; alt=&quot;是&quot;&gt;&lt;/p&gt;
&lt;p&gt;对于加了@Transactional注解的方法来说，在调用代理类的方法时，会先通过拦截器&lt;code&gt;TransactionInterceptor&lt;/code&gt;开启事务，然后在调用目标类的方法，最后在调用结束后，TransactionInterceptor 会提交或回滚事务，大致流程如下图。&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/f445d468/d8b89267.png&quot; alt=&quot;transaction manager&quot;&gt;&lt;/p&gt;
&lt;p&gt;而对于第一段的代码，我在方法 A 中调用方法 B，实际上是通过“this”的引用，也就是直接调用了目标类的方法，而非通过 Spring 上下文获得的代理类，所以。。。事务是不会开启滴。&lt;/p&gt;
&lt;p&gt;解决办法也蛮简单，通过实现ApplicationContextAware接口获得 Spring 的上下文，然后获得目标类的代理类，通过代理类的对象，调用方法 B，即可。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeServiceImpl&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;ApplicationContextAware&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;meta&quot;&gt;@Setter&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ApplicationContext applicationContext;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Giraffe&amp;gt; giraffes)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    GiraffeService service = applicationContext.getBean(GiraffeService.class);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Giraffe giraffe : giraffes) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      service.B(giraffe);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Transactional&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;transactionManager&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Giraffe giraffe)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 1: update something&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 2: insert something&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 3: update something&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;stackoverflow 上也有相关的问题:&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1099025/spring-transactional-what-happens-in-background&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Transactional - What happens in background?&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/23931698/spring-transactional-annotation-self-invocation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Transactional Annotation : Self Invocation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;唉，都快写完了，还没等来 wuli 悦儿&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/95e282f8/8e7068a2.png&quot; alt=&quot;wuli 悦儿&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录一个上周遇到的小问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Running Man 7012</title>
    <link href="http://yemengying.com/2016/10/27/runningman-7012/"/>
    <id>http://yemengying.com/2016/10/27/runningman-7012/</id>
    <published>2016-10-27T13:47:17.000Z</published>
    <updated>2018-12-13T04:34:05.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;前两天刷微博时突然看到 Gary 即将从 《Running Man》(以下简称 RM) 下车的消息，有点伤感，却并不惊讶。可能从2016年开始，就隐约感到节目到了瓶颈，收视率也一直上不来，作为一个铁杆粉丝也不得不承认 RM 没有以前好看了，很长时间没有一期看好几遍的情况了。不过追了 RM 四年，看 RM 早已不是为了娱乐搞笑，而变成了自己生活的一部分，只要看到他们七个就开心。也许在不久的将来连 RM 都会停播了，但现在只要 RM 更新一期，就会看一期，哪怕就是他们几个嗑瓜子闲聊天。即便有再火再好看的节目，自己也早没了当初的心境去追了。改编我前女神的一句歌词就是“有的综艺说不清哪里好，但就是谁都替代不了”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;好了，结束伤感的话题。&lt;/p&gt;
&lt;p&gt;本来想写篇 RM 科普文，但对 RM 不感冒估计怎么说也不会感兴趣吧。所以就简单写点，纪念下我爱的七只和第一次也是最后一次追了四年看过每一期的 RM。部分资料和图片来源于网络，权侵删。&lt;/p&gt;
&lt;h3 id=&quot;七只&quot;&gt;&lt;a href=&quot;#七只&quot; class=&quot;headerlink&quot; title=&quot;七只&quot;&gt;&lt;/a&gt;七只&lt;/h3&gt;&lt;p&gt;RM 能收获那么的喜爱和关注，虽然离不开制作组的精心制作和创意，但更重要的是七个 MC 的人格魅力。So…..就从介绍七只开始，聊聊 RM 吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;刘在石&lt;/strong&gt;:&lt;br&gt;  &lt;img src=&quot;https://pic.yupoo.com/jiananshi/80534c41/b8231039.jpeg&quot; alt=&quot;刘大神&quot;&gt;&lt;br&gt;  外号：刘大神、刘鲁斯·威利斯、刘姆斯·邦德、蚂蚱/蚱蜢、刘赫&lt;/p&gt;
&lt;p&gt;  国民 MC，也应该是目前韩国地位最高的 MC 了。RM 的灵魂人物，美好的一塌糊涂(我是不是和驴得水里面的教育部长一样不会用词🤓)。会记住工作人员的名字，会在录制中去帮助路边的市民，会隐藏自己努力突出其他人，亲民，谦逊，幽默，温暖(此处省略10万字)。跑步很快，所以有个外号叫刘鲁斯·威利斯。如果硬要说一个缺点的话，那就是。。。。。恩，摘了眼睛颜值骤降。&lt;br&gt;  &lt;img src=&quot;https://pic.yupoo.com/jiananshi/7957bb61/8f1eef04.png&quot; alt=&quot;萌萌哒&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;池石镇&lt;/strong&gt;：&lt;br&gt;  &lt;img src=&quot;https://pic.yupoo.com/jiananshi/b2ded4aa/94416e26.jpg&quot; alt=&quot;池石镇&quot;&gt;&lt;br&gt;  外号：王鼻子、黑斑羚、Race Starter&lt;/p&gt;
&lt;p&gt;  王👃大叔，RM 中年龄最大的，擅长身体搞笑。是 RM 中的最弱体, 监狱三人组之一。几乎每次撕名牌都是最先去监狱的，所以也被称为“Race Starter”(比赛开始)。其实鼻子大叔对 RM 的贡献是很大的，在前期所有人的定位还不明确的时候，RM 的笑点都是靠大神和鼻子大叔扛起来的，鼻子叔是那种身体素质一般，但口才超棒的人，很会制造笑料。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;宋智孝&lt;/strong&gt;：&lt;br&gt;  &lt;img src=&quot;https://pic.yupoo.com/jiananshi/54e46ffb/63699140.jpg&quot; alt=&quot;宋智孝&quot;&gt;&lt;br&gt;  外号：懵智、不良智孝、Ace、金智孝、周一情侣&lt;/p&gt;
&lt;p&gt;  RM 中唯一的女 MC。第一眼感觉就是漂亮，很耐看。但深入了解下去，才发现漂亮在智孝身上已经算不上什么闪光点了。第一次见到刚睡醒顶着一头乱乱的头发就去录影的女演员；第一次见到在车上张着嘴睡的女演员；能摔跤，能劈砖，能下泥潭，能蹦极，完全不输给男生；气急了还会爆两句粗口，瞬间变身不良智孝;很聪明，是 RM 中单独获胜次数最多的；这样的懵智怎么可能不喜欢😍&lt;br&gt;  &lt;img src=&quot;https://pic.yupoo.com/jiananshi/ca73daa1/f28b5c45.png&quot; alt=&quot;宋智孝&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;金钟国&lt;/strong&gt;：&lt;br&gt; &lt;img src=&quot;https://pic.yupoo.com/jiananshi/1edb8f53/9596e577.jpeg&quot; alt=&quot;金钟国&quot;&gt;&lt;br&gt;  外号：能力者、老虎、钟淑、斯巴达国&lt;/p&gt;
&lt;p&gt;  很具有反转魅力的一个人。唱歌时嗓音很细腻温柔，撕名牌时却以一抵十；看身材很剽悍，实际却很爱卖萌。是 RM 中的能力者，撕遍天下无敌手，不过也因为太强，经常在撕名牌时被围剿😭。要说能力者有什么怕的，应该就是“背叛长颈鹿”（李光洙）了，就是本能坑害老虎。&lt;br&gt;  &lt;img src=&quot;//yemengying.com/qiniu/image/tumblr_mitpqwkvFE1qgnyjgo6_r1_250.gif&quot; alt=&quot;︿(￣︶￣)︿&quot;&gt;&lt;br&gt;  咳咳，只是为了节目效果，国儿和光洙还是很有爱的🙃。&lt;br&gt;  &lt;img src=&quot;//yemengying.com/qiniu/image/tumblr_mitpqwkvFE1qgnyjgo2_r2_250.gif&quot; alt=&quot;相亲相爱&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;姜gary&lt;/strong&gt;:&lt;br&gt; &lt;img src=&quot;https://pic.yupoo.com/jiananshi/aee80059/8d6c7f46.jpg&quot; alt=&quot;姜gary&quot;&gt;&lt;br&gt;  外号：狗哥、平和Gary、偶尔能力者、鱿鱼、周一情侣&lt;/p&gt;
&lt;p&gt;  本职工作是音乐人，但却因为综艺火了起来。在节目中，总是不经意的爆发一下，所以被称为偶尔能力者，前两期的最强者特辑， gary 都是最后的获胜者。gary 的诸多定位中，最火的应该就是和智孝的周一情侣了。虽然在2016年的节目中，制作组特意淡化了周一cp间的互动，但我一直觉得 gary 就是智孝的“姜盖里”，会偷偷放走她的“姜盖里”。多亏了周一情侣，让我在看综艺的同时，也看了部偶像剧🌚&lt;br&gt; &lt;img src=&quot;https://pic.yupoo.com/jiananshi/a335d17a/c569430f.jpg&quot; alt=&quot;周一情侣&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;哈哈&lt;/strong&gt;：&lt;br&gt;  &lt;img src=&quot;https://pic.yupoo.com/jiananshi/595589e2/3852699b.jpg&quot; alt=&quot;哈哈&quot;&gt;&lt;br&gt;  外号：Haroro、企鹅、花心哈哈&lt;/p&gt;
&lt;p&gt;  哈哈，本名河东勋，不过还是更习惯哈哈这个名字。早期在 RM 的定位是“花心哈哈”，每次一来女嘉宾，就会说“成为我最后的爱吧 (｡♥‿♥｡)”。不过这些只是为了活跃气氛，结婚之后“花心哈哈”的定位就没有，变成了“顾家好男人”，最近听说哈哈马上要有第二个孩子了，在渡汉江那期说的愿望也要实现了。&lt;br&gt;  &lt;img src=&quot;https://pic.yupoo.com/jiananshi/fbecf329/cb2884c4.gif&quot; alt=&quot;☆´∀｀☆&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;李光洙&lt;/strong&gt;:&lt;br&gt;  &lt;img src=&quot;https://pic.yupoo.com/jiananshi/8f831e6e/5343a05d.jpg&quot; alt=&quot;李光洙&quot;&gt;&lt;br&gt;  外号：长颈鹿、亚洲王子、李光子、光凡达、光蟾蜍、情景剧发烧友&lt;/p&gt;
&lt;p&gt;  绝对的男神，我博客的标准结尾。其实在一开始，光洙可以说是最不起眼的，作为一个综艺新手，没有大神，国儿，haha从以前节目积累下的观众缘，没有王鼻子老练，没有 gary 有那么多的歌迷，也没有宋仲基那么明显的颜值优势。但在自己的努力和其他人的帮助下，一点点找到了自己的定位（陷害光洙，easy 兄弟，长颈鹿)。在节目中，光洙最明显的特质应该就是“背叛”了，每次都让人觉得好气啊，然后就又笑的肚子疼。。。。不知道为什么七个 MC 中，最最喜欢光洙，连带着把很多网站的用户名都换成了 giraffe，可能天生就对这种又努力又逗比的人没有抵抗力吧。&lt;br&gt;  放一下女装造型&lt;br&gt;  &lt;img src=&quot;https://pic.yupoo.com/jiananshi/ea305e38/3e5739f2.jpeg&quot; alt=&quot;李光子&quot;&gt;&lt;br&gt;  不过一开始的胡子造型真是亮瞎了我的卡姿兰大眼睛。&lt;br&gt;  &lt;img src=&quot;https://pic.yupoo.com/jiananshi/18ff87f0/ad47d124.jpg&quot; alt=&quot;😱&quot;&gt;&lt;br&gt;  哈哈哈哈，原谅我，爱到深处自然黑啊。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;墙裂推荐&quot;&gt;&lt;a href=&quot;#墙裂推荐&quot; class=&quot;headerlink&quot; title=&quot;墙裂推荐&quot;&gt;&lt;/a&gt;墙裂推荐&lt;/h3&gt;&lt;p&gt;本来想按照好看程度排个最好看的十期，最后发现实在选不出来。每一期都敲好看，都值得看。就随便推几期吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/KwvzbxLDWls/C7eeyc6dRVI.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20130825 &lt;/a&gt;&lt;br&gt; 按照电影雪国列车为主题拍摄的一期，玩游戏整理排名，国儿和大神互打手掌那段简直笑屎我了。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/KwvzbxLDWls/_kGbJeh5ayM.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20130526&lt;/a&gt;&lt;br&gt; 嘉宾是金秀贤和李玹雨，全集高能，我大神叼着接力棒吃洋葱圈简直萌翻我。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/v9hwf_w5zyk/kDnxaOAcKsY.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20141123&lt;/a&gt;&lt;br&gt; 这集造型极其哇撒，放张图，大家憋说话，用心感受&lt;br&gt; &lt;img src=&quot;https://pic.yupoo.com/jiananshi/ad30cb4d/55d3dc2c.png&quot; alt=&quot;(￣▽￣)~*&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/v9hwf_w5zyk/RzktO2d9L1o.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20141012&lt;/a&gt;&lt;br&gt; 七个成员都变成了超级英雄，高空测试胆量那段笑的我肚子疼。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/v9hwf_w5zyk/AKR3BwkXzV8.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20141109&lt;/a&gt;&lt;br&gt; 女装特辑，最爱wuli光子和钟淑了。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/KwvzbxLDWls/JTRj3UG6Nsg.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20130915&lt;/a&gt;&lt;br&gt; 很多人应该冲着嘉宾是Bigbang看过这期了，但我推荐这期是因为这期有我周一情侣的荧屏初吻，我的少女心啊😍&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iqiyi.com/v_19rrn6uwpg.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20141214&lt;/a&gt;&lt;br&gt; 通过一张图就能知道大神为了赢有多拼。&lt;br&gt; &lt;img src=&quot;//yemengying.com/qiniu/image/u=288559190,3305279898&amp;amp;fm=21&amp;amp;gp=0.jpg?imageMogr2/thumbnail/300x200!&quot; alt=&quot;&amp;lt;(￣︶￣)&amp;gt;&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://v.youku.com/v_show/id_XMTUyMjI3MTEwNA==.html?from=y1.6-85.3.1.7712090c9d5a11e5a080&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20160403&lt;/a&gt;&lt;br&gt; 2016年里的觉得最好看的一期。特别是wuli光洙被haha愚弄的那段。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iqiyi.com/w_19rr63053t.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20111225&lt;/a&gt;&lt;br&gt; 第一期最强者特辑。RM 每年都会有一期是最强者特辑，遗憾的是国儿还从来没有赢过，希望下一期最强者战可以是国儿赢。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iqiyi.com/zongyi/20130130/379d4aa0b603dec5.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20120624&lt;/a&gt;&lt;br&gt; RM 第一百期特辑，诸神之战， 嘉宾是金喜善， 结局蛮不错的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/O8GDpd7v8RA/v3YuwBHAY4M.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20150125&lt;/a&gt;&lt;br&gt; 刘姆斯邦德 vs 光佛岩，结尾狗哥真是蠢萌的让人心疼&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iqiyi.com/w_19rt38lku1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20110911&lt;/a&gt;&lt;br&gt; 狗哥做间谍🕵的一期，不应该说是狗哥以为他做间谍，但是其他成员其实都知道他是间谍，他并不知道其他成员知道他是间谍的一期。。。艾玛啊，说的好绕🙃&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;又到睡觉觉的时候了&quot;&gt;&lt;a href=&quot;#又到睡觉觉的时候了&quot; class=&quot;headerlink&quot; title=&quot;又到睡觉觉的时候了&quot;&gt;&lt;/a&gt;又到睡觉觉的时候了&lt;/h3&gt;&lt;p&gt;写的差不多了，这么点内容根本表达不出 RM 带给我的快乐。生活大爆炸也开始更新第十季了，很有可能是最后一季，说不定过两天又要写篇文章纪念下贱萌贱萌的 Sheldon, 总被压迫的 Leonard 和女汉纸 Penny 了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/69d7fb06/f3dc92a7.jpg&quot; alt=&quot;7012&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前两天刷微博时突然看到 Gary 即将从 《Running Man》(以下简称 RM) 下车的消息，有点伤感，却并不惊讶。可能从2016年开始，就隐约感到节目到了瓶颈，收视率也一直上不来，作为一个铁杆粉丝也不得不承认 RM 没有以前好看了，很长时间没有一期看好几遍的情况了。不过追了 RM 四年，看 RM 早已不是为了娱乐搞笑，而变成了自己生活的一部分，只要看到他们七个就开心。也许在不久的将来连 RM 都会停播了，但现在只要 RM 更新一期，就会看一期，哪怕就是他们几个嗑瓜子闲聊天。即便有再火再好看的节目，自己也早没了当初的心境去追了。改编我前女神的一句歌词就是“有的综艺说不清哪里好，但就是谁都替代不了”。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>滚蛋吧~ XML 君</title>
    <link href="http://yemengying.com/2016/10/15/javaConfig-vs-XML/"/>
    <id>http://yemengying.com/2016/10/15/javaConfig-vs-XML/</id>
    <published>2016-10-15T07:20:20.000Z</published>
    <updated>2018-12-13T07:33:20.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Long long time ago, 在《Spring In Action》一书中看到这么一句话&lt;strong&gt; JavaConfig is the preferred option for explicit configuration because it’s more powerful, type-safe, and refactor-friendly &lt;/strong&gt;。不过当时并不知道 &lt;code&gt;JavaConfig&lt;/code&gt; 是神马东东就选择性忽略了。最近新的项目采用了 Spring Boot + JavaConfig ,接触了一个星期的 JavaConfig，感觉还不错，简单比较下它和 XML。由于接连看了 4 部韩国灾难片心情比较蓝瘦，就暂时不要指正错误了，错就错吧(づ｡◕‿‿◕｡)づ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/38ad3eff/2a9a8d29.jpg&quot; alt=&quot;lalala&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;XML&quot;&gt;&lt;a href=&quot;#XML&quot; class=&quot;headerlink&quot; title=&quot;XML&quot;&gt;&lt;/a&gt;XML&lt;/h3&gt;&lt;p&gt;虽然早在 Spring 3 中就开始支持以 &lt;code&gt;JavaConfig&lt;/code&gt; 的方式配置项目，但感觉目前主流的还是以 &lt;code&gt;XML + Annotation&lt;/code&gt; 的方式，很少见到使用 JavaConfig 的。可能有点以偏概全了，但在前司和前前司接触到的项目都是以 XML + Annotation 混合的方式配置的，即在 XML 配置文件中开启注解扫描, 业务 bean 的配置注入采用注解( @Serivce, @Autowire 等等)，全局的一些配置(如 MyBatis 的 DataSource,SqlSessionFactory ，web.xml 等等)使用 XML。&lt;/p&gt;
&lt;p&gt;虽然 XML + Annotation 的方式比纯用 XML 配置的方式少写了很多 XML，但本质上还是基于 XML 的。&lt;/p&gt;
&lt;p&gt;XML 的配置文件比较冗长，不易书写，而且可读性也不高。不知道大家感觉怎么样，反正我看着是挺头疼的╥﹏╥…&lt;/p&gt;
&lt;h3 id=&quot;JavaConfig&quot;&gt;&lt;a href=&quot;#JavaConfig&quot; class=&quot;headerlink&quot; title=&quot;JavaConfig&quot;&gt;&lt;/a&gt;JavaConfig&lt;/h3&gt;&lt;p&gt;先简单介绍一下 JavaConfig，JavaConfig即Java Configuration, 即用纯 Java 的方式来配置 Spring&lt;br&gt; IoC 容器,允许开发者用代码来表示配置逻辑，不再需要 XML。粗略翻了两本关于 Spring Boot的书， JavaConfig 都是最推荐的配置方式。&lt;/p&gt;
&lt;p&gt;使用 JavaConfig 的好处，Spring 官方文档中说的很清楚：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JavaConfig 为依赖注入提供了一个真正面向对象的机制，这意味着开发者可以在配置代码中充分利用 Java 重用、继承和多态性等特性。&lt;/li&gt;
&lt;li&gt;开发者可以完全控制实例化和依赖注入，即使是最复杂的对象也可以很优雅地处理。&lt;/li&gt;
&lt;li&gt;因为使用 JavaConfig 只需要 Java，可以很容易的 refactor 代码，而无需再 IDE 之外使用特殊的工具或插件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JavaConfig 其实很简单，主要是通过 @Configuration 和 @Bean 来进行配置。@Configuration 注解的作用是声明当前类是一个配置类， 就相当于一个 XML 文件。 @Bean 注解声明当前方法返回的是一个 bean。&lt;/p&gt;
&lt;p&gt;可能这样说对于用惯了 XML 的人还是比较抽象的，下面看看这些注解与 XML 配置的对应关系。&lt;/p&gt;
&lt;h3 id=&quot;JavaConfig-与-XML&quot;&gt;&lt;a href=&quot;#JavaConfig-与-XML&quot; class=&quot;headerlink&quot; title=&quot;JavaConfig 与 XML&quot;&gt;&lt;/a&gt;JavaConfig 与 XML&lt;/h3&gt;&lt;p&gt;1.&lt;br&gt;&lt;strong&gt;JavaConfig&lt;/strong&gt;: @Configuration&lt;br&gt;&lt;strong&gt;XML&lt;/strong&gt;:&lt;/p&gt;
  &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xmlns:tx&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xmlns:util&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/util&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xmlns:p&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/beans&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	   http://www.springframework.org/schema/beans/spring-beans.xsd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      http://www.springframework.org/schema/tx&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	   http://www.springframework.org/schema/tx/spring-tx.xsd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      http://www.springframework.org/schema/util&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      http://www.springframework.org/schema/util/spring-util.xsd&quot;&amp;gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.&lt;br&gt;&lt;strong&gt;JavaConfig&lt;/strong&gt;: @Bean&lt;br&gt;&lt;strong&gt;XML&lt;/strong&gt;:&lt;/p&gt;
  &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.alibaba.druid.pool.DruidDataSource&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;jdbc:mysql://127.0.0.1:3307/giraffe&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ymy&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;666666&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.&lt;br&gt;&lt;strong&gt;JavaConfig&lt;/strong&gt;：@ComponentScan&lt;br&gt;&lt;strong&gt;XML&lt;/strong&gt;：&lt;br&gt;  &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;context:component-scan&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4.&lt;br&gt;&lt;strong&gt;JavaConfig&lt;/strong&gt;：@Import&lt;br&gt;&lt;strong&gt;XML&lt;/strong&gt;：&lt;br&gt;   &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;resource&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;XXX.xml&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;比如要配置一个 dataSource， 在 XML 中通常的做法是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;drMainDataSource&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.alibaba.druid.pool.DruidDataSource&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.url&amp;#125;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.username&amp;#125;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.password&amp;#125;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;maxActive&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;mysql.datasource.max-active&amp;#125;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对应的 JavaConfig 是酱紫的：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DataAccessConfig&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConfigurationSupport&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;dataSource&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DataSource &lt;span class=&quot;title&quot;&gt;mysqlDataSource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Value(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.url&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt; String url,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                    @&lt;span class=&quot;title&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.username&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt; String username,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                    @&lt;span class=&quot;title&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.password&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt; String password,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                    @&lt;span class=&quot;title&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.driverClass&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt; String driver,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                    @&lt;span class=&quot;title&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.max-active&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxActive) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    DruidAbstractDataSource dataSource = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DruidDataSource();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dataSource.setDriverClassName(driver);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dataSource.setUrl(url);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dataSource.setUsername(username);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dataSource.setPassword(password);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dataSource.setMaxActive(maxActive);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dataSource;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;虽然才接触了一周的 JavaConfig, 但是相见恨晚啊, 个人还是更喜欢 JavaConfig 的配置方式的。JavaConfig 的配置文件可读性更高也更容易学习，记住简单的几个注解即可；借助 IDE 的力量，更不容易出错；而且脑袋再也不用在 Java 和 XML 间来回切换了，在搭配上 Gradle 简直破费科特！！！！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/5417f84e/5cd518b1.png&quot; alt=&quot;开森&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;相关文档&quot;&gt;&lt;a href=&quot;#相关文档&quot; class=&quot;headerlink&quot; title=&quot;相关文档&quot;&gt;&lt;/a&gt;相关文档&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.spring.io/spring-javaconfig/docs/1.0.0.M4/reference/html/pr01.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring JavaConfig Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《Spring Boot 揭秘》&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;——————————————-片 尾 彩 蛋 🎉🎉🎉—————————————————&lt;br&gt;咳咳，预警预警！！！下面的部分与本文主旨无关。&lt;/p&gt;
&lt;p&gt;首先，换了个新锅，可以预约煮粥，再也不用早起煮粥了，幸福感提升 200%。&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/e5c5a4fc/83a101e1.jpg&quot; alt=&quot;我是锅&quot;&gt;&lt;br&gt;其次，在匿名人士的帮助下上线了新版未翻墙模式下的评论，优化了样式。唉，这是谁的男朋友这么有才华，好羡慕她哦︿(￣︶￣)︿&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/9eeb1071/d6b98de8.png&quot; alt=&quot;&amp;lt;(￣︶￣)&amp;gt;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后，嘿嘿，关注个公众号再走吧(&lt;em&gt;^__^&lt;/em&gt;)&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/3302bb60/7b8457af.jpg&quot; alt=&quot;Running Geek&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Long long time ago, 在《Spring In Action》一书中看到这么一句话&lt;strong&gt; JavaConfig is the preferred option for explicit configuration because it’s more powerful, type-safe, and refactor-friendly &lt;/strong&gt;。不过当时并不知道 &lt;code&gt;JavaConfig&lt;/code&gt; 是神马东东就选择性忽略了。最近新的项目采用了 Spring Boot + JavaConfig ,接触了一个星期的 JavaConfig，感觉还不错，简单比较下它和 XML。由于接连看了 4 部韩国灾难片心情比较蓝瘦，就暂时不要指正错误了，错就错吧(づ｡◕‿‿◕｡)づ&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>【译】S.O.L.I.D 原则在 Go 中的应用（上）</title>
    <link href="http://yemengying.com/2016/09/11/solid-go-design-1/"/>
    <id>http://yemengying.com/2016/09/11/solid-go-design-1/</id>
    <published>2016-09-11T07:09:18.000Z</published>
    <updated>2018-12-13T07:36:24.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;最近两个月没有好好的看书学习，导致博客也水了两个月没写什么正经的。上周收到仓鼠🐹君萌萌哒的邮件之后，又激起了我写博客的欲望。由于自己最近灵感枯竭，所以我决定翻译一篇别人的O(∩_∩)O~。作为一个一直想学 Go，但想了好久还没入门的人，我挑了篇写 Go 的，顺便帮自己熟悉一下 Go。原文是作者根据自己 GolangUK 的&lt;a href=&quot;https://www.youtube.com/watch?v=zzAdEt3xZ1M&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演讲&lt;/a&gt;所整理的，全文以 SOLID 原则为线路讲述了什么样的 Go 代码才算是好代码，当然 SOLID 原则也适用于其他语言。原文比较长，所以准备分成上下两部分，也有十分非常以及特别大的可能是上中下(捂脸)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;咳咳，我果然是打脸体质，下翻译了一句就放弃了。不过，我把它交给了超靠谱的小伙伴。想看下的请移步&lt;a href=&quot;http://kevin.doyeden.com/2016/09/21/solid-go-design-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【译】S.O.L.I.D 原则在 Go 中的应用（下）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;捂。。。。。。。。还是不捂了，脸已经丢没了🙈&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;http://dave.cheney.net/2016/08/20/solid-go-design?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://dave.cheney.net/2016/08/20/solid-go-design?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&lt;/a&gt;&lt;br&gt;原文作者：&lt;a href=&quot;http://dave.cheney.net/about&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dave Cheney&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;世界上有多少个-Go-语言开发者？&quot;&gt;&lt;a href=&quot;#世界上有多少个-Go-语言开发者？&quot; class=&quot;headerlink&quot; title=&quot;世界上有多少个 Go 语言开发者？&quot;&gt;&lt;/a&gt;世界上有多少个 Go 语言开发者？&lt;/h4&gt;&lt;p&gt;介个世界上有多少 Go 开发者捏？在脑海中想一个数字，我们会在最后回到这个话题。&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/f9754553/2eb96ceb.png&quot; alt=&quot;thinking&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Code-review&quot;&gt;&lt;a href=&quot;#Code-review&quot; class=&quot;headerlink&quot; title=&quot;Code review&quot;&gt;&lt;/a&gt;Code review&lt;/h4&gt;&lt;p&gt;有多少人将 code review 当做自己工作的一部分?[听演讲的人都举起了手]。为什么要做 code review？[一些人回答为了阻止不好的代码]&lt;/p&gt;
&lt;p&gt;如果 code review 是为了捕捉到不好的代码，那么问题来了，你怎么判断你正在 review 的代码是好还是不好呢？&lt;/p&gt;
&lt;p&gt;我们可以很容易的说出“这代码好辣眼睛”或者“这源码写的太吊了”，就像说“这画真美”，“这屋子真大气”一样。但是这些都是主观的，我希望找到一些客观的方法来衡量代码是好还是不好。&lt;/p&gt;
&lt;h4 id=&quot;Bad-code&quot;&gt;&lt;a href=&quot;#Bad-code&quot; class=&quot;headerlink&quot; title=&quot;Bad code&quot;&gt;&lt;/a&gt;Bad code&lt;/h4&gt;&lt;p&gt;下面看一下在 code review 中，一段代码有哪些特点会被认为是不好的代码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rigid 代码是不是很僵硬？是否由于严格的类型和参数导致修改代码的成本提高&lt;/li&gt;
&lt;li&gt;Fragile 代码是不是很脆弱？是否一点小的改动就会造成巨大的破坏？&lt;/li&gt;
&lt;li&gt;Immobile 代码是否难以重构？&lt;/li&gt;
&lt;li&gt;Complex 代码是否是过度设计？&lt;/li&gt;
&lt;li&gt;Verbose 当你读这段代码时，能否清楚的知道它是做什么的？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;👆这些都不是什么好听的词，没有人希望在别人 review 自己代码时听到这些词。&lt;/p&gt;
&lt;h4 id=&quot;Good-design&quot;&gt;&lt;a href=&quot;#Good-design&quot; class=&quot;headerlink&quot; title=&quot;Good design&quot;&gt;&lt;/a&gt;Good design&lt;/h4&gt;&lt;p&gt;了解了什么是不好的代码之后，我们可以说“我不喜欢这段代码因为它不易于修改”或者“这段代码并没有清晰的告诉我它要做什么”。但这些并没有带来积极的引导。&lt;/p&gt;
&lt;p&gt;如果我们不仅仅可以描述不好的设计，还可以客观的描述好的设计，是不是更有助于提高呢。&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/58a1a82f/8c479e46.jpg&quot; alt=&quot;excited&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;SOLID&quot;&gt;&lt;a href=&quot;#SOLID&quot; class=&quot;headerlink&quot; title=&quot;SOLID&quot;&gt;&lt;/a&gt;SOLID&lt;/h4&gt;&lt;p&gt;2002年，&lt;code&gt;Robert Martin&lt;/code&gt; 出版了《敏捷软件开发:原则、模式与实践》一书，在书中他描述了可重用软件设计的五个原则，他称之为 &lt;strong&gt;SOLID&lt;/strong&gt; 原则(每个原则的首字母组合在一起)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一责任原则&lt;/li&gt;
&lt;li&gt;开放封闭原则&lt;/li&gt;
&lt;li&gt;里氏替换原则&lt;/li&gt;
&lt;li&gt;接口分离原则&lt;/li&gt;
&lt;li&gt;依赖倒置原则&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这本书有点过时了，书中谈论的语言都已经超过了十年之久。尽管如此，在谈论什么样的 Go 代码才是好代码时，SOLID 的原则依然可以给我们一些启发。&lt;/p&gt;
&lt;p&gt;So，这也就是我花时间想在本文和大家一起讨论的。&lt;/p&gt;
&lt;h4 id=&quot;单一责任原则&quot;&gt;&lt;a href=&quot;#单一责任原则&quot; class=&quot;headerlink&quot; title=&quot;单一责任原则&quot;&gt;&lt;/a&gt;单一责任原则&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/5ac9d1f3/47278348.png&quot; alt=&quot;忙成狗&quot;&gt;&lt;br&gt;SOLID 原则中的第一个原则就是&lt;code&gt;单一责任原则&lt;/code&gt;。&lt;code&gt;Robert C Martin&lt;/code&gt; 说过 A class should have one, and only one, reason to change(修改某个类的时候，原因有且只有一个)，说白了就是，一个类只负责一项职责。&lt;/p&gt;
&lt;p&gt;虽然 Go 语言中并没有类的概念–但我们有更鹅妹子嘤的 &lt;code&gt;composition&lt;/code&gt; (组合)的特性。&lt;/p&gt;
&lt;p&gt;为什么修改一段代码只负责一项职责如此重要呢？如果一个类有两个职责R1，R2，那么修改R1时，可能会导致也要修改R2。修改代码是痛苦的，但更痛苦的是修改代码的原因是由于修改其他代码引起的。&lt;/p&gt;
&lt;p&gt;所以当一个类只负责一个功能领域中的相应职责时，可以修改的它的原因也就最大限度的变少了。&lt;/p&gt;
&lt;h5 id=&quot;耦合-amp-内聚&quot;&gt;&lt;a href=&quot;#耦合-amp-内聚&quot; class=&quot;headerlink&quot; title=&quot;耦合 &amp;amp; 内聚&quot;&gt;&lt;/a&gt;耦合 &amp;amp; 内聚&lt;/h5&gt;&lt;p&gt;这两个词是用来形容一段代码是否易于修改的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;耦合&lt;/code&gt;是指两个东西需要一起修改—对其中一个的改动会影响到另一个。&lt;/p&gt;
&lt;p&gt;另一个相关但独立的概念是&lt;code&gt;内聚&lt;/code&gt;，一般指相互吸引的迷之力量。&lt;/p&gt;
&lt;p&gt;在软件开发领域中，内聚常常用来描述一段代码内各个元素彼此结合的紧密程度。&lt;/p&gt;
&lt;p&gt;下面我准备从 Go 的包模型开始，聊聊 Go 开发中的耦合与内聚。&lt;/p&gt;
&lt;h5 id=&quot;包名&quot;&gt;&lt;a href=&quot;#包名&quot; class=&quot;headerlink&quot; title=&quot;包名&quot;&gt;&lt;/a&gt;包名&lt;/h5&gt;&lt;p&gt;在Go中，所有代码都必须有一个所属的包。一个包名要描述它的用途，同时也是命名空间的前缀。下面是 Go 标准库中一些好的包名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;net/http，提供 http 的客户端和服务端。&lt;/li&gt;
&lt;li&gt;os/exec，可以运行运行外部命令。&lt;/li&gt;
&lt;li&gt;encoding/json，实现了 JSON 文件的编码和解码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;不好的包名&quot;&gt;&lt;a href=&quot;#不好的包名&quot; class=&quot;headerlink&quot; title=&quot;不好的包名&quot;&gt;&lt;/a&gt;不好的包名&lt;/h5&gt;&lt;p&gt;现在让我们来喷一些不好的包名。这些包名并没有很好的展现出它们的用途，当然了前提是它们有-_-|||。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;package server 是提供什么？。。。好吧就当是提供一个服务端吧，但是是什么协议呢?&lt;/li&gt;
&lt;li&gt;package private 是提供什么？一些我不应该看👀的东西？&lt;/li&gt;
&lt;li&gt;还有 package common， package utils，同样无法清楚的表达它们的用途，开发者也不易保持它们功能的专一性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面这些包很快就会变成堆放杂七杂八代码的垃圾堆，而且会由于功能太杂乱而频繁修改。&lt;/p&gt;
&lt;h5 id=&quot;Go-中的-UNIX-哲学&quot;&gt;&lt;a href=&quot;#Go-中的-UNIX-哲学&quot; class=&quot;headerlink&quot; title=&quot;Go 中的 UNIX 哲学&quot;&gt;&lt;/a&gt;Go 中的 UNIX 哲学&lt;/h5&gt;&lt;p&gt;在我看来，任何关于解耦设计的讨论如果没有提到 &lt;code&gt;Doug McIlroy&lt;/code&gt; 的 &lt;code&gt;UNIX 哲学&lt;/code&gt;都是不完整的。UNIX 哲学就是主张将若干简洁，清晰的模块组合起来完成复杂的任务，而且通常情况下这个任务都不是原作者所能预想到的。&lt;/p&gt;
&lt;p&gt;我想 Go 中的包正体现了 UNIX 哲学的精神。因为每一个包都是一个拥有单一责任的简洁的 Go 程序。&lt;/p&gt;
&lt;h4 id=&quot;开放封闭原则&quot;&gt;&lt;a href=&quot;#开放封闭原则&quot; class=&quot;headerlink&quot; title=&quot;开放封闭原则&quot;&gt;&lt;/a&gt;开放封闭原则&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/8f1c8061/5c81f38a.png&quot; alt=&quot;open or close&quot;&gt;&lt;br&gt;第二个原则，也就是 SOLID 当中的 O，是由 &lt;code&gt;Bertrand Meyer&lt;/code&gt; 提出的&lt;code&gt;开放封闭原则&lt;/code&gt;。1988年，Bertrand Mey 在他的著作《面向对象软件构造》一书中写道：Software entities should be open for extension,but closed for modification（软件实体应当对扩展开放，对修改关闭）。&lt;/p&gt;
&lt;p&gt;那么这个n年前的建议在 Go 语言中是如何应用的呢？&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; A &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	year &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(a A)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Greet&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Hello GolangUK&quot;&lt;/span&gt;, a.year)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; B &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	A&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(b B)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Greet&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Welcome to GolangUK&quot;&lt;/span&gt;, b.year)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a A&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	a.year = &lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b B&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	b.year = &lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	a.Greet()&lt;span class=&quot;comment&quot;&gt;//Hello GolangUK 2016&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	b.Greet()&lt;span class=&quot;comment&quot;&gt;//Welcome to GolangUK 2016&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的代码中，我们有类型A，包含属性 year 和一个方法 Greet。我们还有类型B，B中嵌入(embedding)了类型A，并且B提供了他自己的 Greet 方法，覆盖了A的。&lt;/p&gt;
&lt;p&gt;嵌入不仅仅是针对方法，还可以通过嵌入使用被嵌入类型的属性。我们可以看到，在上面的例子中，因为A和B定义在同一个包中，所以B可以像使用自己定义的属性一样使用A中的 private 的属性 year。&lt;/p&gt;
&lt;p&gt;所以，嵌入是实现 Go 类型对扩展开放非常鹅妹子嘤的手段。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Cat &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Name &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(c Cat)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Legs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(c Cat)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PrintLegs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;I have %d legs\n&quot;&lt;/span&gt;, c.Legs())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; OctoCat &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Cat&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(c OctoCat)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Legs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; octo OctoCat&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;I have %d legs\n&quot;&lt;/span&gt;, octo.Legs())&lt;span class=&quot;comment&quot;&gt;// I have 5 legs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	octo.PrintLegs()&lt;span class=&quot;comment&quot;&gt;// I have 4 legs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，我们有一个 Cat 类型，它拥有一个 Legs 方法可以获得腿的数目。我们将 Cat 类型嵌入到一个新类型 OctoCat 中，然后声明 Octocat 有5条腿。然而，尽管 OctoCat 定义了它自己的 Legs 方法返回5，在调用 PrintLegs 方法时依旧会打印“I have 4 legs”。&lt;/p&gt;
&lt;p&gt;这是因为 PrintLegs 方法是定义在 Cat 类型中的，它将 Cat 作为接收者，所以会调用 Cat 类型的 Legs 方法。Cat 类型并不会感知到它被嵌入到其他类型中，所以它的方法也不会被更改。&lt;/p&gt;
&lt;p&gt;所以，我们可以说 Go 的类型是对扩展开放，对修改关闭的。&lt;/p&gt;
&lt;p&gt;实际上，Go 类型中的方法比普通函数多了一点语法糖—-将接收者作为一个预先声明的形参。(译者注：这块理解了好久😖。。。，不懂得可以看这篇&lt;a href=&quot;https://tiancaiamao.gitbooks.io/go-internals/content/zh/07.3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考文档&lt;/a&gt;)&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(c Cat)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PrintLegs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;I have %d legs\n&quot;&lt;/span&gt;, c.Legs())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PrintLegs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(c Cat)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;I have %d legs\n&quot;&lt;/span&gt;, c.Legs())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于 Go 并不支持函数重载，所以 OctoCat 类型并不能替代 Cat 类型。这也将引出下一个原则—里氏替换原则。&lt;/p&gt;
&lt;p&gt;且听下回分解。。。。。。。&lt;/p&gt;
&lt;p&gt;——————————————别看我，我只是个傲娇的分割线———————————————————————&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;终于完成了上的部分↖(^ω^)↗，尽量在下周完成下。由于并不了解 Go 难免会有错误或翻译生硬的地方，欢迎指正错误，欢迎一起讨论~(≧▽≦)/~。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;都看到这了，关注个公众号再走吧🙈&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/3302bb60/7b8457af.jpg&quot; alt=&quot;Running Geek&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近两个月没有好好的看书学习，导致博客也水了两个月没写什么正经的。上周收到仓鼠🐹君萌萌哒的邮件之后，又激起了我写博客的欲望。由于自己最近灵感枯竭，所以我决定翻译一篇别人的O(∩_∩)O~。作为一个一直想学 Go，但想了好久还没入门的人，我挑了篇写 Go 的，顺便帮自己熟悉一下 Go。原文是作者根据自己 GolangUK 的&lt;a href=&quot;https://www.youtube.com/watch?v=zzAdEt3xZ1M&quot;&gt;演讲&lt;/a&gt;所整理的，全文以 SOLID 原则为线路讲述了什么样的 Go 代码才算是好代码，当然 SOLID 原则也适用于其他语言。原文比较长，所以准备分成上下两部分，也有十分非常以及特别大的可能是上中下(捂脸)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;咳咳，我果然是打脸体质，下翻译了一句就放弃了。不过，我把它交给了超靠谱的小伙伴。想看下的请移步&lt;a href=&quot;http://kevin.doyeden.com/2016/09/21/solid-go-design-2/&quot;&gt;【译】S.O.L.I.D 原则在 Go 中的应用（下）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;捂。。。。。。。。还是不捂了，脸已经丢没了🙈&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://yemengying.com/categories/go/"/>
    
    
      <category term="翻译" scheme="http://yemengying.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="go" scheme="http://yemengying.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>如何快速拥有产品的sense</title>
    <link href="http://yemengying.com/2016/08/23/how-to-get-pm-sense/"/>
    <id>http://yemengying.com/2016/08/23/how-to-get-pm-sense/</id>
    <published>2016-08-23T08:32:31.000Z</published>
    <updated>2018-12-13T07:50:46.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;趁着在家葛优躺的几天，培养培养自己在产品方面的技能，经过axure,sketch,xmind的重重磨炼，总结出来这篇文章，从三个方面讲讲如何才能在短时间内快速拥有产品的sense，画出高保真的原型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/68123a53/3055dd84.jpg&quot; alt=&quot;lalala&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;趁着在家葛优躺的几天，培养培养自己在产品方面的技能，经过axure,sketch,xmind的重重磨炼，总结出来这篇文章，从三个方面讲讲如何才能在短时间内快速拥有产品的sense，画出高保真的原型。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>【Spring】Xml解析相关</title>
    <link href="http://yemengying.com/2016/07/25/spring-xml/"/>
    <id>http://yemengying.com/2016/07/25/spring-xml/</id>
    <published>2016-07-25T14:37:18.000Z</published>
    <updated>2018-12-13T07:51:24.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;先请看下左上角，hiahia，新logo，si不si很漂酿，有个会设计的表哥就是好，又好又快，还不用钱。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;总结下最近看的 Spring Xml 解析相关的一点点东东，还没有看完。。。。&lt;/p&gt;
&lt;h3 id=&quot;参考文档&quot;&gt;&lt;a href=&quot;#参考文档&quot; class=&quot;headerlink&quot; title=&quot;参考文档&quot;&gt;&lt;/a&gt;参考文档&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/j-lo-spring-resource/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring 资源访问剖析和策略模式应用&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题外话&quot;&gt;&lt;a href=&quot;#题外话&quot; class=&quot;headerlink&quot; title=&quot;题外话&quot;&gt;&lt;/a&gt;题外话&lt;/h3&gt;&lt;p&gt;先说个在看源码时，发现的一个以前没有关注过的点。大神们在创建集合的时候，大多数都设置了一个预估的初始容量(2的幂数)，而不是直接采用默认的初始容量( HashMap 中是16)，就像下面这样:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Map from dependency type to corresponding autowired value */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;Class&amp;lt;?&amp;gt;, Object&amp;gt; resolvableDependencies = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;Class&amp;lt;?&amp;gt;, Object&amp;gt;(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Map of bean definition objects, keyed by bean name */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;String, BeanDefinition&amp;gt; beanDefinitionMap = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;String, BeanDefinition&amp;gt;(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Map of singleton and non-singleton bean names, keyed by dependency type */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;Class&amp;lt;?&amp;gt;, String[]&amp;gt; allBeanNamesByType = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;Class&amp;lt;?&amp;gt;, String[]&amp;gt;(&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Map of singleton-only bean names, keyed by dependency type */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;Class&amp;lt;?&amp;gt;, String[]&amp;gt; singletonBeanNamesByType = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;Class&amp;lt;?&amp;gt;, String[]&amp;gt;(&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** List of bean definition names, in registration order */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; List&amp;lt;String&amp;gt; beanDefinitionNames = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** List of names of manually registered singletons, in registration order */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; Set&amp;lt;String&amp;gt; manualSingletonNames = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedHashSet&amp;lt;String&amp;gt;(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;大神们这样写肯定是有好处的。不太了解其它集合类的实现，就以 HashMap 为例看一下。HashMap 底层的存储结构是一个 Entry 对象的数组(Java 8中是 Node 对象的数组)，默认初始容量是16，负载因子是0.75。也就是说当元素个数超过16*0.75=12时，就要进行扩容，将数组大小扩大一倍，并计算元素在新数组中的位置，这个过程是比较耗费性能的。所以，个人觉得大神们这样写是因为如果直接采用默认的初始容量，那么在元素个数较少时，会浪费空间；元素个数较多时，又会造成频繁的扩容，耗费性能。&lt;/p&gt;
&lt;p&gt;想起上次的需求，明明确定一定以及肯定评分只有5个，还是new了个默认容量(16)的map。&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/a02bf1e2/ebfc3a85.jpeg&quot; alt=&quot;ren xing&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;相关接口&quot;&gt;&lt;a href=&quot;#相关接口&quot; class=&quot;headerlink&quot; title=&quot;相关接口&quot;&gt;&lt;/a&gt;相关接口&lt;/h3&gt;&lt;p&gt;先理一理加载xml配置文件的相关接口&lt;br&gt;&lt;strong&gt;1.Resource&lt;/strong&gt;：采用了策略模式，是 Spring 资源访问策略的抽象，该接口有多种实现类，每个实现类代表一种资源访问策略，负责具体的资源访问。&lt;br&gt;&lt;strong&gt;2.ResourceLoader&lt;/strong&gt;：该接口的实现类可以获得一个 Resource 的实例。&lt;br&gt;&lt;strong&gt;3.BeanDefinitionReader&lt;/strong&gt;： 根据指定的 Resource 加载bean definition. &lt;/p&gt;
&lt;p&gt;未完待续。。。。。。&lt;/p&gt;
&lt;p&gt;本来是想多整理一点的，但是。。。听说新一期RM主角是wuli光洙，这还能忍，滚去看RM了。。。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;先请看下左上角，hiahia，新logo，si不si很漂酿，有个会设计的表哥就是好，又好又快，还不用钱。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yemengying.com/categories/spring/"/>
    
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>【Spring】Bean的生命周期</title>
    <link href="http://yemengying.com/2016/07/14/spring-bean-life-cycle/"/>
    <id>http://yemengying.com/2016/07/14/spring-bean-life-cycle/</id>
    <published>2016-07-14T13:35:53.000Z</published>
    <updated>2018-12-13T07:52:27.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;智商捉鸡🐔，实在没办法一下子理解Spring IoC和AOP的实现原理，看的闹心也不太懂，所以。。。决定拆成小的不能在小的一个个问题，一点点啃。今天先来看看Spring中Bean的生命周期。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Spring Bean是Spring应用中最最重要的部分了。所以来看看Spring容器在初始化一个bean的时候会做那些事情，顺序是怎样的，在容器关闭的时候，又会做哪些事情。&lt;/p&gt;
&lt;h3 id=&quot;示例代码&quot;&gt;&lt;a href=&quot;#示例代码&quot; class=&quot;headerlink&quot; title=&quot;示例代码&quot;&gt;&lt;/a&gt;示例代码&lt;/h3&gt;&lt;p&gt;git地址：&lt;br&gt;&lt;div id=&quot;badge-container-giraffe0813-giraffeInSpring-giraffeInSpring&quot; class=&quot;hexo-github&quot; style=&quot;width: 100%&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;/hexo-github/badge.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
  loadStyle(&quot;/hexo-github/style.css&quot;);
  loadStyle(&quot;/hexo-github/octicons/octicons.css&quot;);
  new Badge(&quot;#badge-container-giraffe0813-giraffeInSpring-giraffeInSpring&quot;, &quot;giraffe0813&quot;, &quot;giraffeInSpring&quot;, &quot;giraffeInSpring&quot;, false);
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;spring版本：4.2.3.RELEASE&lt;br&gt;鉴于Spring源码是用gradle构建的，我也决定舍弃我大maven，尝试下&lt;a href=&quot;http://kevin.doyeden.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;洪菊&lt;/a&gt;推荐过的gradle。运行beanLifeCycle模块下的junit test即可在控制台看到如下输出，可以清楚了解Spring容器在创建，初始化和销毁Bean的时候依次做了那些事情。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Spring容器初始化&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;=====================================&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用GiraffeService无参构造函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;GiraffeService中利用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;方法设置属性值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;BeanName:: Bean Name defined &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; context=giraffeService&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;BeanClassLoader,ClassLoader Name = sun.misc.Launcher&lt;span class=&quot;variable&quot;&gt;$AppClassLoader&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;BeanFactory,&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;BeanFactory:: giraffe bean singleton=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;Environment&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;ResourceLoader:: Resource File Name=spring-beans.xml&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;ApplicationEventPublisher&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;ApplicationContext:: Bean Definition Names=[giraffeService, org.springframework.context.annotation.CommonAnnotationBeanPostProcessor&lt;span class=&quot;comment&quot;&gt;#0, com.giraffe.spring.service.GiraffeServicePostProcessor#0]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;执行BeanPostProcessor的postProcessBeforeInitialization方法,beanName=giraffeService&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用PostConstruct注解标注的方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;执行InitializingBean接口的afterPropertiesSet方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;执行配置的init-method&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;执行BeanPostProcessor的postProcessAfterInitialization方法,beanName=giraffeService&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Spring容器初始化完毕&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;=====================================&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;从容器中获取Bean&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;giraffe Name=李光洙&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;=====================================&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用preDestroy注解标注的方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;执行DisposableBean接口的destroy方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;执行配置的destroy-method&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Spring容器关闭&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;参考文档&quot;&gt;&lt;a href=&quot;#参考文档&quot; class=&quot;headerlink&quot; title=&quot;参考文档&quot;&gt;&lt;/a&gt;参考文档&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.journaldev.com/2637/spring-bean-life-cycle#comment-35644&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;life cycle management of a spring bean&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://javabeat.net/life-cycle-management-of-a-spring-bean/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring Bean Life Cycle&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Spring-Bean的生命周期&quot;&gt;&lt;a href=&quot;#Spring-Bean的生命周期&quot; class=&quot;headerlink&quot; title=&quot;Spring Bean的生命周期&quot;&gt;&lt;/a&gt;Spring Bean的生命周期&lt;/h3&gt;&lt;p&gt;先来看看，Spring在Bean从创建到销毁的生命周期中可能做得事情。&lt;/p&gt;
&lt;h4 id=&quot;initialization-和-destroy&quot;&gt;&lt;a href=&quot;#initialization-和-destroy&quot; class=&quot;headerlink&quot; title=&quot;initialization 和 destroy&quot;&gt;&lt;/a&gt;initialization 和 destroy&lt;/h4&gt;&lt;p&gt;有时我们需要在Bean属性值set好之后和Bean销毁之前做一些事情，比如检查Bean中某个属性是否被正常的设置好值了。Spring框架提供了多种方法让我们可以在Spring Bean的生命周期中执行initialization和pre-destroy方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.实现InitializingBean和DisposableBean接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这两个接口都只包含一个方法。通过实现InitializingBean接口的afterPropertiesSet()方法可以在Bean属性值设置好之后做一些操作，实现DisposableBean接口的destroy()方法可以在销毁Bean之前做一些操作。&lt;/p&gt;
&lt;p&gt;🌰如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InitializingBean&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;DisposableBean&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;afterPropertiesSet&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行InitializingBean接口的afterPropertiesSet方法&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行DisposableBean接口的destroy方法&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种方法比较简单，但是不建议使用。因为这样会将Bean的实现和Spring框架耦合在一起。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.在bean的配置文件中指定init-method和destroy-method方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring允许我们创建自己的init方法和destroy方法，只要在Bean的配置文件中指定init-method和destroy-method的值就可以在Bean初始化时和销毁之前执行一些操作。&lt;br&gt;🌰如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//通过&amp;lt;bean&amp;gt;的destroy-method属性指定的销毁方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;destroyMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行配置的destroy-method&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//通过&amp;lt;bean&amp;gt;的init-method属性指定的初始化方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行配置的init-method&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置文件中的配置：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;giraffeService&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.giraffe.spring.service.GiraffeService&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;init-method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;initMethod&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;destroy-method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;destroyMethod&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是自定义的init-method和post-method方法可以抛异常但是不能有参数。&lt;br&gt;这种方式比较推荐，因为可以自己创建方法，无需将Bean的实现直接依赖于spring的框架。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.使用@PostConstruct和@PreDestroy注解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了xml配置的方式，Spring也支持用&lt;code&gt;@PostConstruct&lt;/code&gt;和 &lt;code&gt;@PreDestroy&lt;/code&gt;注解来指定init和destroy方法。这两个注解均在&lt;code&gt;javax.annotation&lt;/code&gt;包中。&lt;br&gt;为了注解可以生效，需要在配置文件中定义&lt;code&gt;org.springframework.context.annotation.CommonAnnotationBeanPostProcessor&lt;/code&gt;或&lt;code&gt;context:annotation-config&lt;/code&gt;&lt;br&gt;🌰如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@PostConstruct&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initPostConstruct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行PostConstruct注解标注的方法&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@PreDestroy&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;preDestroy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行preDestroy注解标注的方法&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置文件:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;org.springframework.context.annotation.CommonAnnotationBeanPostProcessor&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;实现-Aware接口-在Bean中使用Spring框架的一些对象&quot;&gt;&lt;a href=&quot;#实现-Aware接口-在Bean中使用Spring框架的一些对象&quot; class=&quot;headerlink&quot; title=&quot;实现*Aware接口 在Bean中使用Spring框架的一些对象&quot;&gt;&lt;/a&gt;实现*Aware接口 在Bean中使用Spring框架的一些对象&lt;/h4&gt;&lt;p&gt;有些时候我们需要在Bean的初始化中使用Spring框架自身的一些对象来执行一些操作，比如获取ServletContext的一些参数，获取ApplicaitionContext中的BeanDefinition的名字，获取Bean在容器中的名字等等。为了让Bean可以获取到框架自身的一些对象，Spring提供了一组名为*Aware的接口。&lt;br&gt;这些接口均继承于&lt;code&gt;org.springframework.beans.factory.Aware&lt;/code&gt;标记接口，并提供一个将由Bean实现的set*方法,Spring通过基于setter的依赖注入方式使相应的对象可以被Bean使用。&lt;br&gt;网上说，这些接口是利用观察者模式实现的，类似于servlet listeners，目前还不明白，不过这也不在本文的讨论范围内。&lt;br&gt;介绍一些重要的Aware接口：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ApplicationContextAware: 获得ApplicationContext对象,可以用来获取所有Bean definition的名字。&lt;/li&gt;
&lt;li&gt;BeanFactoryAware:获得BeanFactory对象，可以用来检测Bean的作用域。&lt;/li&gt;
&lt;li&gt;BeanNameAware:获得Bean在配置文件中定义的名字。&lt;/li&gt;
&lt;li&gt;ResourceLoaderAware:获得ResourceLoader对象，可以获得classpath中某个文件。&lt;/li&gt;
&lt;li&gt;ServletContextAware:在一个MVC应用中可以获取ServletContext对象，可以读取context中的参数。&lt;/li&gt;
&lt;li&gt;ServletConfigAware在一个MVC应用中可以获取ServletConfig对象，可以读取config中的参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🌰如下:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt;   &lt;span class=&quot;title&quot;&gt;ApplicationContextAware&lt;/span&gt;,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;title&quot;&gt;ApplicationEventPublisherAware&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;BeanClassLoaderAware&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;BeanFactoryAware&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;title&quot;&gt;BeanNameAware&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;EnvironmentAware&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;ImportAware&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;ResourceLoaderAware&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setBeanClassLoader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ClassLoader classLoader)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setBeanClassLoader,ClassLoader Name = &quot;&lt;/span&gt; + classLoader.getClass().getName());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setBeanFactory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BeanFactory beanFactory)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setBeanFactory,setBeanFactory:: giraffe bean singleton=&quot;&lt;/span&gt; +  beanFactory.isSingleton(&lt;span class=&quot;string&quot;&gt;&quot;giraffeService&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setBeanName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setBeanName:: Bean Name defined in context=&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                + s);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setApplicationContext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ApplicationContext applicationContext)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setApplicationContext:: Bean Definition Names=&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                + Arrays.toString(applicationContext.getBeanDefinitionNames()));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setApplicationEventPublisher&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ApplicationEventPublisher applicationEventPublisher)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setApplicationEventPublisher&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setEnvironment&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Environment environment)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setEnvironment&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setResourceLoader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ResourceLoader resourceLoader)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Resource resource = resourceLoader.getResource(&lt;span class=&quot;string&quot;&gt;&quot;classpath:spring-beans.xml&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setResourceLoader:: Resource File Name=&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                + resource.getFilename());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setImportMetadata&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(AnnotationMetadata annotationMetadata)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setImportMetadata&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;BeanPostProcessor&quot;&gt;&lt;a href=&quot;#BeanPostProcessor&quot; class=&quot;headerlink&quot; title=&quot;BeanPostProcessor&quot;&gt;&lt;/a&gt;BeanPostProcessor&lt;/h4&gt;&lt;p&gt;上面的*Aware接口是针对某个实现这些接口的Bean定制初始化的过程，&lt;br&gt;Spring同样可以针对容器中的所有Bean，或者某些Bean定制初始化过程，只需提供一个实现BeanPostProcessor接口的类即可。 该接口中包含两个方法，postProcessBeforeInitialization和postProcessAfterInitialization。 postProcessBeforeInitialization方法会在容器中的Bean初始化之前执行， postProcessAfterInitialization方法在容器中的Bean初始化之后执行。&lt;br&gt;🌰如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CustomerBeanPostProcessor&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanPostProcessor&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;title&quot;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行BeanPostProcessor的postProcessBeforeInitialization方法,beanName=&quot;&lt;/span&gt; + beanName);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bean;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;title&quot;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行BeanPostProcessor的postProcessAfterInitialization方法,beanName=&quot;&lt;/span&gt; + beanName);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bean;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;要将BeanPostProcessor的Bean像其他Bean一样定义在配置文件中&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.giraffe.spring.service.CustomerBeanPostProcessor&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;所以。。。结合第一节控制台输出的内容，Spring Bean的生命周期是这样纸的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bean容器找到配置文件中Spring Bean的定义。&lt;/li&gt;
&lt;li&gt;Bean容器利用Java Reflection API创建一个Bean的实例。&lt;/li&gt;
&lt;li&gt;如果涉及到一些属性值 利用set方法设置一些属性值。&lt;/li&gt;
&lt;li&gt;如果Bean实现了BeanNameAware接口，调用setBeanName()方法，传入Bean的名字。&lt;/li&gt;
&lt;li&gt;如果Bean实现了BeanClassLoaderAware接口，调用setBeanClassLoader()方法，传入ClassLoader对象的实例。&lt;/li&gt;
&lt;li&gt;如果Bean实现了BeanFactoryAware接口，调用setBeanClassLoader()方法，传入ClassLoader对象的实例。&lt;/li&gt;
&lt;li&gt;与上面的类似，如果实现了其他*Aware接口，就调用相应的方法。&lt;/li&gt;
&lt;li&gt;如果有和加载这个Bean的Spring容器相关的BeanPostProcessor对象，执行postProcessBeforeInitialization()方法&lt;/li&gt;
&lt;li&gt;如果Bean实现了InitializingBean接口，执行afterPropertiesSet()方法。&lt;/li&gt;
&lt;li&gt;如果Bean在配置文件中的定义包含&lt;code&gt;init-method&lt;/code&gt;属性，执行指定的方法。&lt;/li&gt;
&lt;li&gt;如果有和加载这个Bean的Spring容器相关的BeanPostProcessor对象，执行postProcessAfterInitialization()方法&lt;/li&gt;
&lt;li&gt;当要销毁Bean的时候，如果Bean实现了DisposableBean接口，执行destroy()方法。&lt;/li&gt;
&lt;li&gt;当要销毁Bean的时候，如果Bean在配置文件中的定义包含&lt;code&gt;destroy-method&lt;/code&gt;属性，执行指定的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用图表示一下(&lt;a href=&quot;http://www.jianshu.com/p/d00539babca5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图来源&lt;/a&gt;)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/dcdf1402/09a8ab47.png&quot; alt=&quot;Spring BeanLifeCycle&quot;&gt;&lt;/p&gt;
&lt;p&gt;希望今晚能成功玩上pokemon go，好想抓精灵啊&lt;br&gt;&lt;img src=&quot;https://pic.yupoo.com/jiananshi/2cac9c9d/fca3487f.jpg&quot; alt=&quot;啦啦啦&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;欢迎指正错误，欢迎一起讨论~~&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;智商捉鸡🐔，实在没办法一下子理解Spring IoC和AOP的实现原理，看的闹心也不太懂，所以。。。决定拆成小的不能在小的一个个问题，一点点啃。今天先来看看Spring中Bean的生命周期。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yemengying.com/categories/spring/"/>
    
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
</feed>
